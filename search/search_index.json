{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Markdown Popups Overview Sublime Markdown Popups (MdPopups) is a library for Sublime Text plugins. It utilizes the new plugin API found in ST3 to create popups and phantoms from Markdown or HTML. It requires at least ST3 3124+. MdPopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create popups and/or phantoms. It also provides a number of other helpful API commands to aid in creating great popups and phantoms. MdPopups will use your color scheme to create popups/phantoms that fit your editors look. Plugins Using Markdown Popups facelessuser/ColorHelper flashios09/GitGutter SublimeText/LaTeXTools Kronuz/SublimeCodeIntel phil65/KodiDevKit sublimelsp/LSP Features Can take Markdown or HTML and create nice looking popups and phantoms. Dynamically creates popup and phantom themes from your current Sublime color scheme. Can create syntax highlighted code blocks easily using your existing Sublime color scheme (can also use Pygments with some setup). Can create color preview boxes via API calls. A CSS template environment that allows users to override and tweak the overall look of the popups and phantoms to better fit their preferred look. Plugins can extend the current CSS to inject plugin specific class styling.","title":"Markdown Popups"},{"location":"#about-markdown-popups","text":"","title":"About Markdown Popups"},{"location":"#overview","text":"Sublime Markdown Popups (MdPopups) is a library for Sublime Text plugins. It utilizes the new plugin API found in ST3 to create popups and phantoms from Markdown or HTML. It requires at least ST3 3124+. MdPopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create popups and/or phantoms. It also provides a number of other helpful API commands to aid in creating great popups and phantoms. MdPopups will use your color scheme to create popups/phantoms that fit your editors look.","title":"Overview"},{"location":"#plugins-using-markdown-popups","text":"facelessuser/ColorHelper flashios09/GitGutter SublimeText/LaTeXTools Kronuz/SublimeCodeIntel phil65/KodiDevKit sublimelsp/LSP","title":"Plugins Using Markdown Popups"},{"location":"#features","text":"Can take Markdown or HTML and create nice looking popups and phantoms. Dynamically creates popup and phantom themes from your current Sublime color scheme. Can create syntax highlighted code blocks easily using your existing Sublime color scheme (can also use Pygments with some setup). Can create color preview boxes via API calls. A CSS template environment that allows users to override and tweak the overall look of the popups and phantoms to better fit their preferred look. Plugins can extend the current CSS to inject plugin specific class styling.","title":"Features"},{"location":"api/","text":"API Dependencies Your plugin should include the Package Control dependencies listed below. Please read about Package Control's dependencies to learn more. { \"*\" : { \">=3124\" : [ \"mdpopups\" ] } } Check out facelessuser/mdpopups_test if to create quick and easy popup tests. Clone it into Packages/mdpopups_test , run Package Control: Satisfy dependencies , and then restart Sublime. You should be able to then run the command Mdpopups: Test to see an example popup, phantom, or (if on Sublime Text 4) HTML sheet. You can even create output of the source HTML for debugging. Feel free to try it out. Markdown Support MdPopups uses Python-Markdown/markdown to parse Markdown and transform it into a Sublime popup or phantom. The Markdown environment supports basic Markdown syntax, but also includes a number of specialty extensions to enhance and extend the Markdown environment. Due to the minihtml environment that Sublime uses, the type of tags and CSS that can be used are a bit limited. MdPopups provides a CSS that includes most of the common supported tags that can be used. Then few specific extensions (that work well within the minihtml environment) have been selected to provide support for a some additional useful features. Prior to version 2.0.0, the default extensions and extension configurations were locked down, but starting with 2.1.0, this restriction has been mostly removed. Not all Python Markdown extensions and extension options are compatible with Sublime's minihtml environment, and extensions like markdown.extensions.extra can include some extensions that are not compatible, but there are a number of additional extension and extension options that can be used beyond what is provided by default. In general, it is recommended to include each plugin individual on a case by case basis and disable features that aren't compatible. Below we will touch on the specific extensions used by default which are known to work in the Sublime minihtml environment. If you are on version 2.1.0+, read on in Frontmatter to learn how to customize extensions. Extensions These three extensions are setup and configured automatically and should not be configured manually. Also, do not try to use markdown.extensions.codehilite or markdown.extensions.fenced_code as the following extensions have been specifically altered to output Sublime syntax highlighting properly and will clash with markdown.extensions.codehilite and markdown.extensions.fenced_code . mdpopups.mdx.highlight ( a modified version pymdownx.highlight for Sublime Text highlighting) controls and configures the highlighting of code blocks. mdpopups.mdx.superfences (a modified version pymdownx.superfences for Sublime Text highlighting) that provides support for nested fenced blocks. mdpopups.mdx.inlinehilite (a modified version of [ pymdownx.inlinehilite ] for Sublime Text highlighting) allows for inline code highlighting: `#!py3thon import module` \u2192 import module . Please don't use this version. These extensions are provided by Python Markdown: markdown.extensions.attr_list allows you to add HTML attributes to block and inline elements easily. markdown.extensions.nl2br turns new lines into < br > tags. markdown.extensions.def_list adds support for definition lists. markdown.extensions.admonition provides admonition blocks. These are 3 rd party extensions provided by PyMdown Extensions: pymdownx.betterem is an extension that aims to improve upon emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently: _handled_intelligently_ \u2192 handled_intelligently and asterisks can be used to do mid word emphasis: em*pha*sis \u2192 em pha sis. pymdownx.magiclink auto links HTML and email links. In 2.1.0 +, it also allows the shortening of common repository pull request, issue, and commit links (if configured). pymdownx.extrarawhtml allows you to add markdown=\"1\" to raw, block HTML elements to allow content under them to be parsed with Python markdown (inline tags should already have their content parsed). This module is exposing just this functionality from the Python Markdown's Extra extension as the feature could not be enabled without including all of the Extra extensions other features. You can read the Python Markdown's Extra extension documentation to learn more about this feature. Frontmatter Frontmatter can be used to configure content in 2.1.0+. The frontmatter must be specified, starting on the first line of the content, before the Markdown. The frontmatter content should be in YAML syntax and should come between the YAML markers: --- . --- # yaml content --- Optionally the content can use the ending ... as shown below: --- # yaml content ... At the base level, the YAML content is a hash table containing key value pairs. --- key1 : value1 key2 : value2 ... Enable Code Wrapping The allow_code_wrap setting allows block code tags to have their content wrapped. If disabled (the default), code content will not wrap lines. --- allow_code_wrap : true ... Custom Fences The included mdpopups.mdx.superfences has an option that allows for custom fences. Custom fences are a convenient way to add support for special block content such as UML diagrams. Since configuring mdpopups.mdx.superfences is not allowed directly, you can setup your own custom fences via a separate custom_fences option. See the original SuperFences' Custom Fences documentation to learn more. --- custom_fences : - name : uml class : uml format : !!python/name:my_package.my_module.my_custom_format ... Configure Markdown Extensions Custom extension configurations are specified under the markdown_extensions key whose value is an array of extensions. Each extension is specified as a string. If you have specific settings to configure for an extension, simply make that array entry a dictionary where the key name is the extension name, and value is a hash table with all the settings. The default configuration is below. --- markdown_extensions : - markdown.extensions.admonition - markdown.extensions.attr_list - markdown.extensions.def_list - markdown.extensions.nl2br - pymdownx.betterem - pymdownx.magiclink - pymdownx.extrarawhtml ... Notice that mdpopups.mdx.highlight , mdpopups.mdx.superfences , and mdpopups.mdx.inlinehilite are not shown here as they cannot be set directly and are handled by automatically by MdPopups. Let's say we wanted to keep the default extensions, but we wanted to enable pymdown.magiclink 's repository URL shortening and add and configure pymdownx.keys , pymdownx.escapeall , pymdownx.smartsymbols , and markdown.extensions.smarty . We must specify the full configuration we would like. We will use the base default settings outlined above, adding our new options and extensions. --- markdown_extensions : - markdown.extensions.admonition - markdown.extensions.attr_list - markdown.extensions.def_list - markdown.extensions.nl2br - markdown.extensions.smarty : smart_quotes : false - pymdownx.betterem - pymdownx.magiclink : base_repo_url : https://github.com/facelessuser/sublime-markdown-popups repo_url_shortener : true - pymdownx.extrarawhtml - pymdownx.keys - pymdownx.escapeall : hardbreak : true nbsp : true - pymdownx.smartsymbols : ordinal_numbers : false ... Configure Frontmatter From Python Objects A lot of times in plugins, it may be easier to build up a Python dictionary and convert it to YAML. MdPopups provides a function to exactly this: frontmatter = { \"allow_code_wrap\" : false , \"language_map\" : { \"language\" : [[ \"mapping_alias\" ], [ \"MyPackage/MySyntaxLanguage\" ]] }, \"markdown_extensions\" : [ \"markdown.extensions.admonition\" , \"markdown.extensions.attr_list\" , \"markdown.extensions.def_list\" , \"markdown.extensions.nl2br\" , # Smart quotes always have corner cases that annoy me, so don't bother with them. { \"markdown.extensions.smarty\" : { \"smart_quotes\" : False }}, \"pymdownx.betterem\" , { \"pymdownx.magiclink\" : { \"repo_url_shortener\" : True , \"base_repo_url\" : \"https://github.com/facelessuser/sublime-markdown-popups\" } }, \"pymdownx.extrarawhtml\" , \"pymdownx.keys\" , { \"pymdownx.escapeall\" : { \"hardbreak\" : True , \"nbsp\" : True }}, # Sublime doesn't support superscript, so no ordinal numbers { \"pymdownx.smartsymbols\" : { \"ordinal_numbers\" : False }} ] } content = mdpopups . format_frontmatter ( frontmatter ) + markdown_content New in 4.1.0 Added support for language_map in front matter. See sublime_user_lang_map option to learn more about the structure. Styling Popups and phantoms are styled with CSS that is fed through the Jinja2 template engine. A default CSS is provided that styles commonly used elements. Plugins can provide CSS to add additional styling for plugin specific purposes. See CSS Styling to learn more about the template engine and general styling info. It is advised to use the wrapper_class option of the show_popup , update_popup , and add_phantom commands to wrap your plugin content in a div with a unique, plugin specific class. This way plugins can inject CSS to style their specific elements via . mdpopups . myplugin-wrapper . myclass {} or simply . myplugin-wrapper . myclass {} . Also check out the included Python Markdown attr_list extension syntax . This is a good extension for applying classes directly to elements within Markdown format. Sometimes it can be difficult to target certain kinds of block elements, so if all else fails, you can insert raw HTML for specific elements into your Markdown and apply classes directly to them. API Usage MdPopups provides a number of accessible functions. Version ( int ,) mdpopups . version Returns the version of the MdPopups library. Returns a tuple of integers which represents the major, minor, and patch version. Show Popup mdpopups . show_popup Accepts Markdown and creates a Sublime popup. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description view sublime . View A Sublime Text view object. content str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. flags int 0 Flags to pass down to the Sublime Text view.show_popup call. location int - 1 Location to show popup in view. -1 means to show right under the first cursor. max_width int 320 Maximum width of the popup. max_height int 240 Maximum height of the popup. on_navigate def fn () None Callback that receives one variable href . on_hide def fn () None Callback for when the popup is hidden. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping . Update Popup mdpopups . update_popup Updates the current existing popup. Parameter Type Default Description view sublime . View A Sublime Text view object. content str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping . Hide Popup mdpopups . hide_popup Hides the current popup. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. Is Popup Visible bool mdpopups . is_popup_visible Checks if popup is visible in the view. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. Add Phantom int mdpopups . add_phantom Adds a phantom to the view and returns the phantom id as an integer. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description view sublime . View A Sublime Text view object. key str A key that is associated with the given phantom. Multiple phantoms can share the same key, but each phantom will have its own id. region sublime . Region Region in the view where the phantom should be inserted. content str Markdown/HTML content for the phantom. layout int How the HTML content should be inserted. Acceptable values are: sublime.LAYOUT_INLINE , sublime.LAYOUT_BLOCK , and sublime.LAYOUT_BELOW . md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. on_navigate def fn () None Callback that receives one variable href . wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping . Erase Phantoms mdpopups . erase_phantoms Erase all phantoms associated with the given key. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. key str A key that is associated with phantoms. Multiple phantoms can share the same key, but each phantom will have its own id. Erase Phantom by ID mdpopups . erase_phantom_by_id Erase a single phantom by its id. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. pid str The id associated with a single phantom. Multiple phantoms can share the same key, but each phantom will have its own id. Query Phantom [ sublime . Region ] mdpopups . query_phantom Query the location of a phantom by specifying its id. A list of sublime.Region s will be returned. If the phantom with the given id is not found, the region will be returned with positions of (-1, -1) . Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. pid int The id associated with a single phantom. Multiple phantoms can share the same key, but each phantom will have its own id. Query Phantoms [ sublime . Region ] mdpopups . query_phantoms Query the location of multiple phantoms by specifying their ids. A list of sublime.Region s will be returned where each index corresponds to the index of ids that was passed in. If a given phantom id is not found, that region will be returned with positions of (-1, -1) . Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. pids [ int ] A list of ids associated with phantoms. Multiple phantoms can share the same key, but each phantom will have its own id. Phantom Class mdpopups . Phantoms A phantom object for use with PhantomSet . Parameter Type Default Description region sublime . Region Region in the view where the phantom should be inserted. content str Markdown/HTML content for the phantom. layout int How the HTML content should be inserted. Acceptable values are: sublime.LAYOUT_INLINE , sublime.LAYOUT_BLOCK , and sublime.LAYOUT_BELOW . md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. on_navigate def fn () None Callback that receives one variable href . wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Attributes Attribute Type Description region sublime . Region Region in the view where the phantom should be inserted. content str Markdown/HTML content for the phantom. layout int How the HTML content should be inserted. Acceptable values are: sublime.LAYOUT_INLINE , sublime.LAYOUT_BLOCK , and sublime.LAYOUT_BELOW . md bool Defines whether the content is Markdown and needs to be converted. css str Additional CSS that will be injected. on_navigate def fn () Callback that receives one variable href . wrapper_class str A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping . Phantom Set Class mdpopups . PhantomSet A class that allows you to update phantoms under the specified key. Parameter Type Default Description view sublime . View A Sublime Text view object. key str The key that should be associated with all related phantoms in the set. Methods mdpopups.PhantomSet.update Update all the phantoms in the set with the given phantom list. Parameter Type Default Description new_phantoms [ mdpopups . Phantom ] A list of MdPopups phantoms. sublime.Phantom will be converted to mdpopups.Phantom . New HTML Sheet mdpopups . new_html_sheet Accepts Markdown and creates a Sublime HTML sheet. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description window sublime . Window A Sublime Text view object. name str Name for the HTML sheet. contents str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. flags int 0 Flags to pass down to the Sublime Text new_html_sheet call. group int - 1 Specify window group. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. New 3.6.0 new_html_sheet is new in 3.6.0. This feature should be considered experimental. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping . Update HTML Content Experimental Feature This feature is new in Sublime Text 4. Sublime's API may change in future versions for this feature and may break this. mdpopups . update_html_sheet Accepts Markdown and updates the content of a Sublime HTML sheet. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description sheet sublime . HtmlSheet A Sublime Text HTML sheet object. contents str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. New 3.6.0 new_html_sheet is new in 3.6.0. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping . Clear Cache mdpopups . clear_cache Clears the CSS theme related caches. Markdown to HTML str mdpopups . md2html Exposes the Markdown to HTML converter in case it is desired to parse only a section of markdown. This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Required Default Description view sublime . View Yes Sublime text View object. markup string Yes The markup code to be converted. template_vars dict No None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict No None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping . Color Box str mdpopups . color_box Generates a color preview box image encoded in base 64 and formatted to be inserted right in your your Markdown or HTML code as an img tag. Parameter Type Default Description colors [ str ] A list of color strings formatted as #RRGGBBAA where R is the red channel, G is the green channel, B is the blue channel, and A is the alpha channel. border str The color for the color box border. Input is a RGB color formatted as #RRGGBB . border2 str None The optional secondary border color. This is great if you are going to have it on a light and dark backgrounds. You can use a double border so the color stands out regardless of the background. Input is a RGB color formatted as #RRGGBB . height int 32 Height of color box. width int 32 Width of color box. border_size int 1 Width of the color box border. If using border2 , the value should be set to at least 2 to see both colors. check_size int 4 Size of checkered box squares used for the background of transparent colors. max_colors int 5 Max number of colors that will be evaluated in the colors parameter. Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally. alpha bool False Will create color box images with a real alpha channel instead of simulating one with a checkered background. border_map int 0xF A mapping of which borders to show. Where 0x1 is TOP , 0x2 is LEFT , 0x4 is BOTTOM , 0x8 is RIGHT . Map flags can be accessed via mdpopups.colorbox.TOP etc. Color Box Raw bytes mdpopups . color_box Generates a color preview box image and returns the raw byte string of the image. Parameter Type Default Description colors [ str ] A list of color strings formatted as #RRGGBBAA where R is the red channel, G is the green channel, B is the blue channel, and A is the alpha channel. border str The color for the color box border. Input is a RGB color formatted as #RRGGBB . border2 str None The optional secondary border color. This is great if you are going to have it on a light and dark backgrounds. You can use a double border so the color stands out regardless of the background. Input is a RGB color formatted as #RRGGBB . height int 32 Height of color box. width int 32 Width of color box. border_size int 1 Width of the color box border. If using border2 , the value should be set to at least 2 to see both colors. check_size int 4 Size of checkered box squares used for the background of transparent colors. max_colors int 5 Max number of colors that will be evaluated in the colors parameter. Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally. alpha bool False Will create color box images with a real alpha channel instead of simulating one with a checkered background. border_map int 0xF A mapping of which borders to show. Where 0x1 is TOP , 0x2 is LEFT , 0x4 is BOTTOM , 0x8 is RIGHT . Map flags can be accessed via mdpopups.colorbox.TOP etc. Tint str mdpopups . tint Takes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a string containing the base 64 encoded PNG in a HTML element. Parameter Type Default Description img str / bytes Either a string in the form Packages/Package/resource.png or a byte string of a PNG image. color str A string in the form of #RRGGBB or #RRGGBBAA (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme). opacity int 255 An integer value between 0 - 255 that specifies the opacity of the tint. height int None Height that should be specified in the return HTML element. width int None Width that should be specified in the return HTML element. Tint Raw bytes mdpopups . tint_raw Takes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a byte string of the modified PNG. Parameter Type Default Description img str / bytes Either a string in the form Packages/Package/resource.png or a byte string of a PNG image. color str A string in the form of #RRGGBB or #RRGGBBAA (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme). opacity int 255 An integer value between 0 - 255 that specifies the opacity of the tint. Scope to Style dict mdpopups . scope2style Takes a sublime scope (complexity doesn't matter), and guesses the style that would be applied. While there may be untested corner cases with complex scopes where it fails, in general, it is usually accurate. The returned dictionary is in the form: { # Colors will be None if not found, # though usually, even if the scope has no color # it will return the overall theme foreground. # # Background might be None if using `explicit_background` # as it only returns a background if that style specifically # defines a background. \"color\" : \"#RRGGBB\" , \"background\" : \"#RRGGBB\" , # Style will usually be either 'bold', 'italic'. # Multiple styles may be returned 'bold italic' or an empty string ''. \"style\" : 'bold italic' } Parameter Type Default Description view sublime . View Sublime text View object so that the correct color scheme will be searched. scope string The scope to search for. selected bool False Whether this scope is in a selected state (selected text). explicit_background bool False Only return a background if one is explicitly defined in the color scheme. Syntax Highlight str mdpopups . syntax_highlight Allows for syntax highlighting outside the Markdown environment. You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description view sublime . View Sublime text View object. src str The source code to be converted. No fence tokes are needed ( ``` ). language str None Specifies the language to highlight as. inline bool False Will return the code formatted for inline display. allow_code_wrap bool False Do not convert all the spaces in code blocks to &nbsp; so that wrapping can occur. language_map Dict None Language map that can be passed in to add to the built-in language map. Mainly for Plugins to add plugin specific languages that are too specific to be added globally. New in 4.1.0 Added language_map parameter. See sublime_user_lang_map option to learn more about the structure. Tabs to Spaces str mdpopups . tabs2spaces The Markdown parser used converts all tabs to spaces with the simple logic of 1 tab equals 4 spaces. This logic is generally applied in other places like syntax_highlight . When formatting code for syntax_highlight , you may want to translate the tabs to spaces based on tab stops before passing it through opposed to apply the simple logic of converting all tabs to 4 spaces regardless of tab stops. tabs2spaces does exactly this, allowing you format the whitespace in a more intelligent manner. tabs2spaces cannot do anything about characters, and there are some even in monospace fonts, that are wider than normal characters. It doesn't detect zero width characters either. It also cannot predict cases where two or more Unicode character are shown as one. But in some cases, this more intelligent output is much better than the \"all tabs are arbitrarily one size\" logic. Example (Notice that \u266d is a bit larger than normal characters): >>> import mdpopups >>> text = ''' ============================================================ T\\tTp\\tSp\\tD\\tDp\\tS\\tD7\\tT ------------------------------------------------------------ A\\tF#m\\tBm\\tE\\tC#m\\tD\\tE7\\tA A#\\tGm\\tCm\\tF\\tDm\\tD#\\tF7\\tA# B\u266d\\tGm\\tCm\\tF\\tDm\\tE\u266dm\\tF7\\tB\u266d ''' >>> print ( mdpopups . tabs2spaces ( text , tab_size = 8 )) ============================================================ T Tp Sp D Dp S D7 T ------------------------------------------------------------ A F#m Bm E C#m D E7 A A# Gm Cm F Dm D# F7 A# B\u266d Gm Cm F Dm E\u266dm F7 B Parameter Type Default Description text str Text to convert. tab_size int 4 Tab size. Get Language From View str mdpopups . get_language_from_view Allows a user to extract the equivalent language specifier for mdpopups.syntax_highlight from a view. If the language cannot be determined, None will be returned. Parameter Type Default Description view sublime . View Sublime text View object. Resolve Remote Images str mdpopups . resolve_images This was added to download remote images. resolve_images accepts an HTML buffer, a resolver and a callback and will search the HTML buffer for image URLs and download them if appropriate. Since this function can have a resolver that can download the images asynchronously, it is not performed in the main path when showing popups or phantoms. Ideally, this would be used after manually running Markdown through md2html . The following resolve functions are available: Name Description blocking_resolver A blocking image resolver. Will block while download an image. ui_thread_resolver Will execute image downloads on the main thread. worker_thread_resolver Will execute image downloads on the worker (\"async\") thread of Sublime Text. Parameter Type Default Description minihtml str A minihtml string buffer. resolver function A function that resolves an image URL by downloading it. It accepts a URL and callback. on_done function A callback for when the image resolving is complete. Accepts a minihtml string buffer. New in 4.0 This is a new feature added in 4.0, and is currently considered experimental.","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#dependencies","text":"Your plugin should include the Package Control dependencies listed below. Please read about Package Control's dependencies to learn more. { \"*\" : { \">=3124\" : [ \"mdpopups\" ] } } Check out facelessuser/mdpopups_test if to create quick and easy popup tests. Clone it into Packages/mdpopups_test , run Package Control: Satisfy dependencies , and then restart Sublime. You should be able to then run the command Mdpopups: Test to see an example popup, phantom, or (if on Sublime Text 4) HTML sheet. You can even create output of the source HTML for debugging. Feel free to try it out.","title":"Dependencies"},{"location":"api/#markdown-support","text":"MdPopups uses Python-Markdown/markdown to parse Markdown and transform it into a Sublime popup or phantom. The Markdown environment supports basic Markdown syntax, but also includes a number of specialty extensions to enhance and extend the Markdown environment. Due to the minihtml environment that Sublime uses, the type of tags and CSS that can be used are a bit limited. MdPopups provides a CSS that includes most of the common supported tags that can be used. Then few specific extensions (that work well within the minihtml environment) have been selected to provide support for a some additional useful features. Prior to version 2.0.0, the default extensions and extension configurations were locked down, but starting with 2.1.0, this restriction has been mostly removed. Not all Python Markdown extensions and extension options are compatible with Sublime's minihtml environment, and extensions like markdown.extensions.extra can include some extensions that are not compatible, but there are a number of additional extension and extension options that can be used beyond what is provided by default. In general, it is recommended to include each plugin individual on a case by case basis and disable features that aren't compatible. Below we will touch on the specific extensions used by default which are known to work in the Sublime minihtml environment. If you are on version 2.1.0+, read on in Frontmatter to learn how to customize extensions.","title":"Markdown Support"},{"location":"api/#extensions","text":"These three extensions are setup and configured automatically and should not be configured manually. Also, do not try to use markdown.extensions.codehilite or markdown.extensions.fenced_code as the following extensions have been specifically altered to output Sublime syntax highlighting properly and will clash with markdown.extensions.codehilite and markdown.extensions.fenced_code . mdpopups.mdx.highlight ( a modified version pymdownx.highlight for Sublime Text highlighting) controls and configures the highlighting of code blocks. mdpopups.mdx.superfences (a modified version pymdownx.superfences for Sublime Text highlighting) that provides support for nested fenced blocks. mdpopups.mdx.inlinehilite (a modified version of [ pymdownx.inlinehilite ] for Sublime Text highlighting) allows for inline code highlighting: `#!py3thon import module` \u2192 import module . Please don't use this version. These extensions are provided by Python Markdown: markdown.extensions.attr_list allows you to add HTML attributes to block and inline elements easily. markdown.extensions.nl2br turns new lines into < br > tags. markdown.extensions.def_list adds support for definition lists. markdown.extensions.admonition provides admonition blocks. These are 3 rd party extensions provided by PyMdown Extensions: pymdownx.betterem is an extension that aims to improve upon emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently: _handled_intelligently_ \u2192 handled_intelligently and asterisks can be used to do mid word emphasis: em*pha*sis \u2192 em pha sis. pymdownx.magiclink auto links HTML and email links. In 2.1.0 +, it also allows the shortening of common repository pull request, issue, and commit links (if configured). pymdownx.extrarawhtml allows you to add markdown=\"1\" to raw, block HTML elements to allow content under them to be parsed with Python markdown (inline tags should already have their content parsed). This module is exposing just this functionality from the Python Markdown's Extra extension as the feature could not be enabled without including all of the Extra extensions other features. You can read the Python Markdown's Extra extension documentation to learn more about this feature.","title":"Extensions"},{"location":"api/#frontmatter","text":"Frontmatter can be used to configure content in 2.1.0+. The frontmatter must be specified, starting on the first line of the content, before the Markdown. The frontmatter content should be in YAML syntax and should come between the YAML markers: --- . --- # yaml content --- Optionally the content can use the ending ... as shown below: --- # yaml content ... At the base level, the YAML content is a hash table containing key value pairs. --- key1 : value1 key2 : value2 ...","title":"Frontmatter"},{"location":"api/#enable-code-wrapping","text":"The allow_code_wrap setting allows block code tags to have their content wrapped. If disabled (the default), code content will not wrap lines. --- allow_code_wrap : true ...","title":"Enable Code Wrapping"},{"location":"api/#custom-fences","text":"The included mdpopups.mdx.superfences has an option that allows for custom fences. Custom fences are a convenient way to add support for special block content such as UML diagrams. Since configuring mdpopups.mdx.superfences is not allowed directly, you can setup your own custom fences via a separate custom_fences option. See the original SuperFences' Custom Fences documentation to learn more. --- custom_fences : - name : uml class : uml format : !!python/name:my_package.my_module.my_custom_format ...","title":"Custom Fences"},{"location":"api/#configure-markdown-extensions","text":"Custom extension configurations are specified under the markdown_extensions key whose value is an array of extensions. Each extension is specified as a string. If you have specific settings to configure for an extension, simply make that array entry a dictionary where the key name is the extension name, and value is a hash table with all the settings. The default configuration is below. --- markdown_extensions : - markdown.extensions.admonition - markdown.extensions.attr_list - markdown.extensions.def_list - markdown.extensions.nl2br - pymdownx.betterem - pymdownx.magiclink - pymdownx.extrarawhtml ... Notice that mdpopups.mdx.highlight , mdpopups.mdx.superfences , and mdpopups.mdx.inlinehilite are not shown here as they cannot be set directly and are handled by automatically by MdPopups. Let's say we wanted to keep the default extensions, but we wanted to enable pymdown.magiclink 's repository URL shortening and add and configure pymdownx.keys , pymdownx.escapeall , pymdownx.smartsymbols , and markdown.extensions.smarty . We must specify the full configuration we would like. We will use the base default settings outlined above, adding our new options and extensions. --- markdown_extensions : - markdown.extensions.admonition - markdown.extensions.attr_list - markdown.extensions.def_list - markdown.extensions.nl2br - markdown.extensions.smarty : smart_quotes : false - pymdownx.betterem - pymdownx.magiclink : base_repo_url : https://github.com/facelessuser/sublime-markdown-popups repo_url_shortener : true - pymdownx.extrarawhtml - pymdownx.keys - pymdownx.escapeall : hardbreak : true nbsp : true - pymdownx.smartsymbols : ordinal_numbers : false ...","title":"Configure Markdown Extensions"},{"location":"api/#configure-frontmatter-from-python-objects","text":"A lot of times in plugins, it may be easier to build up a Python dictionary and convert it to YAML. MdPopups provides a function to exactly this: frontmatter = { \"allow_code_wrap\" : false , \"language_map\" : { \"language\" : [[ \"mapping_alias\" ], [ \"MyPackage/MySyntaxLanguage\" ]] }, \"markdown_extensions\" : [ \"markdown.extensions.admonition\" , \"markdown.extensions.attr_list\" , \"markdown.extensions.def_list\" , \"markdown.extensions.nl2br\" , # Smart quotes always have corner cases that annoy me, so don't bother with them. { \"markdown.extensions.smarty\" : { \"smart_quotes\" : False }}, \"pymdownx.betterem\" , { \"pymdownx.magiclink\" : { \"repo_url_shortener\" : True , \"base_repo_url\" : \"https://github.com/facelessuser/sublime-markdown-popups\" } }, \"pymdownx.extrarawhtml\" , \"pymdownx.keys\" , { \"pymdownx.escapeall\" : { \"hardbreak\" : True , \"nbsp\" : True }}, # Sublime doesn't support superscript, so no ordinal numbers { \"pymdownx.smartsymbols\" : { \"ordinal_numbers\" : False }} ] } content = mdpopups . format_frontmatter ( frontmatter ) + markdown_content New in 4.1.0 Added support for language_map in front matter. See sublime_user_lang_map option to learn more about the structure.","title":"Configure Frontmatter From Python Objects"},{"location":"api/#styling","text":"Popups and phantoms are styled with CSS that is fed through the Jinja2 template engine. A default CSS is provided that styles commonly used elements. Plugins can provide CSS to add additional styling for plugin specific purposes. See CSS Styling to learn more about the template engine and general styling info. It is advised to use the wrapper_class option of the show_popup , update_popup , and add_phantom commands to wrap your plugin content in a div with a unique, plugin specific class. This way plugins can inject CSS to style their specific elements via . mdpopups . myplugin-wrapper . myclass {} or simply . myplugin-wrapper . myclass {} . Also check out the included Python Markdown attr_list extension syntax . This is a good extension for applying classes directly to elements within Markdown format. Sometimes it can be difficult to target certain kinds of block elements, so if all else fails, you can insert raw HTML for specific elements into your Markdown and apply classes directly to them.","title":"Styling"},{"location":"api/#api-usage","text":"MdPopups provides a number of accessible functions.","title":"API Usage"},{"location":"api/#version","text":"( int ,) mdpopups . version Returns the version of the MdPopups library. Returns a tuple of integers which represents the major, minor, and patch version.","title":"Version"},{"location":"api/#show-popup","text":"mdpopups . show_popup Accepts Markdown and creates a Sublime popup. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description view sublime . View A Sublime Text view object. content str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. flags int 0 Flags to pass down to the Sublime Text view.show_popup call. location int - 1 Location to show popup in view. -1 means to show right under the first cursor. max_width int 320 Maximum width of the popup. max_height int 240 Maximum height of the popup. on_navigate def fn () None Callback that receives one variable href . on_hide def fn () None Callback for when the popup is hidden. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping .","title":"Show Popup"},{"location":"api/#update-popup","text":"mdpopups . update_popup Updates the current existing popup. Parameter Type Default Description view sublime . View A Sublime Text view object. content str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping .","title":"Update Popup"},{"location":"api/#hide-popup","text":"mdpopups . hide_popup Hides the current popup. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object.","title":"Hide Popup"},{"location":"api/#is-popup-visible","text":"bool mdpopups . is_popup_visible Checks if popup is visible in the view. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object.","title":"Is Popup Visible"},{"location":"api/#add-phantom","text":"int mdpopups . add_phantom Adds a phantom to the view and returns the phantom id as an integer. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description view sublime . View A Sublime Text view object. key str A key that is associated with the given phantom. Multiple phantoms can share the same key, but each phantom will have its own id. region sublime . Region Region in the view where the phantom should be inserted. content str Markdown/HTML content for the phantom. layout int How the HTML content should be inserted. Acceptable values are: sublime.LAYOUT_INLINE , sublime.LAYOUT_BLOCK , and sublime.LAYOUT_BELOW . md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. on_navigate def fn () None Callback that receives one variable href . wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping .","title":"Add Phantom"},{"location":"api/#erase-phantoms","text":"mdpopups . erase_phantoms Erase all phantoms associated with the given key. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. key str A key that is associated with phantoms. Multiple phantoms can share the same key, but each phantom will have its own id.","title":"Erase Phantoms"},{"location":"api/#erase-phantom-by-id","text":"mdpopups . erase_phantom_by_id Erase a single phantom by its id. Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. pid str The id associated with a single phantom. Multiple phantoms can share the same key, but each phantom will have its own id.","title":"Erase Phantom by ID"},{"location":"api/#query-phantom","text":"[ sublime . Region ] mdpopups . query_phantom Query the location of a phantom by specifying its id. A list of sublime.Region s will be returned. If the phantom with the given id is not found, the region will be returned with positions of (-1, -1) . Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. pid int The id associated with a single phantom. Multiple phantoms can share the same key, but each phantom will have its own id.","title":"Query Phantom"},{"location":"api/#query-phantoms","text":"[ sublime . Region ] mdpopups . query_phantoms Query the location of multiple phantoms by specifying their ids. A list of sublime.Region s will be returned where each index corresponds to the index of ids that was passed in. If a given phantom id is not found, that region will be returned with positions of (-1, -1) . Included for convenience and consistency. Parameter Type Default Description view sublime . View A Sublime Text view object. pids [ int ] A list of ids associated with phantoms. Multiple phantoms can share the same key, but each phantom will have its own id.","title":"Query Phantoms"},{"location":"api/#phantom-class","text":"mdpopups . Phantoms A phantom object for use with PhantomSet . Parameter Type Default Description region sublime . Region Region in the view where the phantom should be inserted. content str Markdown/HTML content for the phantom. layout int How the HTML content should be inserted. Acceptable values are: sublime.LAYOUT_INLINE , sublime.LAYOUT_BLOCK , and sublime.LAYOUT_BELOW . md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. on_navigate def fn () None Callback that receives one variable href . wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Attributes Attribute Type Description region sublime . Region Region in the view where the phantom should be inserted. content str Markdown/HTML content for the phantom. layout int How the HTML content should be inserted. Acceptable values are: sublime.LAYOUT_INLINE , sublime.LAYOUT_BLOCK , and sublime.LAYOUT_BELOW . md bool Defines whether the content is Markdown and needs to be converted. css str Additional CSS that will be injected. on_navigate def fn () Callback that receives one variable href . wrapper_class str A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping .","title":"Phantom Class"},{"location":"api/#phantom-set-class","text":"mdpopups . PhantomSet A class that allows you to update phantoms under the specified key. Parameter Type Default Description view sublime . View A Sublime Text view object. key str The key that should be associated with all related phantoms in the set. Methods mdpopups.PhantomSet.update Update all the phantoms in the set with the given phantom list. Parameter Type Default Description new_phantoms [ mdpopups . Phantom ] A list of MdPopups phantoms. sublime.Phantom will be converted to mdpopups.Phantom .","title":"Phantom Set Class"},{"location":"api/#new-html-sheet","text":"mdpopups . new_html_sheet Accepts Markdown and creates a Sublime HTML sheet. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description window sublime . Window A Sublime Text view object. name str Name for the HTML sheet. contents str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. flags int 0 Flags to pass down to the Sublime Text new_html_sheet call. group int - 1 Specify window group. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. New 3.6.0 new_html_sheet is new in 3.6.0. This feature should be considered experimental. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping .","title":"New HTML Sheet"},{"location":"api/#update-html-content","text":"Experimental Feature This feature is new in Sublime Text 4. Sublime's API may change in future versions for this feature and may break this. mdpopups . update_html_sheet Accepts Markdown and updates the content of a Sublime HTML sheet. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description sheet sublime . HtmlSheet A Sublime Text HTML sheet object. contents str Markdown/HTML content for the popup. md bool True Defines whether the content is Markdown and needs to be converted. css str None Additional CSS that will be injected. wrapper_class str None A string containing the class name you wish wrap your content in. A div will be created with the given class. template_vars dict None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. New 3.6.0 new_html_sheet is new in 3.6.0. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping .","title":"Update HTML Content"},{"location":"api/#clear-cache","text":"mdpopups . clear_cache Clears the CSS theme related caches.","title":"Clear Cache"},{"location":"api/#markdown-to-html","text":"str mdpopups . md2html Exposes the Markdown to HTML converter in case it is desired to parse only a section of markdown. This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Required Default Description view sublime . View Yes Sublime text View object. markup string Yes The markup code to be converted. template_vars dict No None A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars. These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object plugin . template_env_options dict No None A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Content plugin vars are found under the object: plugin .A dictionary containing options for the Jinja2 template environment. This only applies to the HTML/Markdown content. Removed in 4.0 4.0 removed the parameter nl2br and alow_code_wrap . If passed to the function, they will be ignored. To disable nl2br , you can customize which extensions get loaded; see Configure Markdown Extensions . To enable code wrapping, see Enable Code Wrapping .","title":"Markdown to HTML"},{"location":"api/#color-box","text":"str mdpopups . color_box Generates a color preview box image encoded in base 64 and formatted to be inserted right in your your Markdown or HTML code as an img tag. Parameter Type Default Description colors [ str ] A list of color strings formatted as #RRGGBBAA where R is the red channel, G is the green channel, B is the blue channel, and A is the alpha channel. border str The color for the color box border. Input is a RGB color formatted as #RRGGBB . border2 str None The optional secondary border color. This is great if you are going to have it on a light and dark backgrounds. You can use a double border so the color stands out regardless of the background. Input is a RGB color formatted as #RRGGBB . height int 32 Height of color box. width int 32 Width of color box. border_size int 1 Width of the color box border. If using border2 , the value should be set to at least 2 to see both colors. check_size int 4 Size of checkered box squares used for the background of transparent colors. max_colors int 5 Max number of colors that will be evaluated in the colors parameter. Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally. alpha bool False Will create color box images with a real alpha channel instead of simulating one with a checkered background. border_map int 0xF A mapping of which borders to show. Where 0x1 is TOP , 0x2 is LEFT , 0x4 is BOTTOM , 0x8 is RIGHT . Map flags can be accessed via mdpopups.colorbox.TOP etc.","title":"Color Box"},{"location":"api/#color-box-raw","text":"bytes mdpopups . color_box Generates a color preview box image and returns the raw byte string of the image. Parameter Type Default Description colors [ str ] A list of color strings formatted as #RRGGBBAA where R is the red channel, G is the green channel, B is the blue channel, and A is the alpha channel. border str The color for the color box border. Input is a RGB color formatted as #RRGGBB . border2 str None The optional secondary border color. This is great if you are going to have it on a light and dark backgrounds. You can use a double border so the color stands out regardless of the background. Input is a RGB color formatted as #RRGGBB . height int 32 Height of color box. width int 32 Width of color box. border_size int 1 Width of the color box border. If using border2 , the value should be set to at least 2 to see both colors. check_size int 4 Size of checkered box squares used for the background of transparent colors. max_colors int 5 Max number of colors that will be evaluated in the colors parameter. Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally. alpha bool False Will create color box images with a real alpha channel instead of simulating one with a checkered background. border_map int 0xF A mapping of which borders to show. Where 0x1 is TOP , 0x2 is LEFT , 0x4 is BOTTOM , 0x8 is RIGHT . Map flags can be accessed via mdpopups.colorbox.TOP etc.","title":"Color Box Raw"},{"location":"api/#tint","text":"str mdpopups . tint Takes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a string containing the base 64 encoded PNG in a HTML element. Parameter Type Default Description img str / bytes Either a string in the form Packages/Package/resource.png or a byte string of a PNG image. color str A string in the form of #RRGGBB or #RRGGBBAA (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme). opacity int 255 An integer value between 0 - 255 that specifies the opacity of the tint. height int None Height that should be specified in the return HTML element. width int None Width that should be specified in the return HTML element.","title":"Tint"},{"location":"api/#tint-raw","text":"bytes mdpopups . tint_raw Takes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a byte string of the modified PNG. Parameter Type Default Description img str / bytes Either a string in the form Packages/Package/resource.png or a byte string of a PNG image. color str A string in the form of #RRGGBB or #RRGGBBAA (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme). opacity int 255 An integer value between 0 - 255 that specifies the opacity of the tint.","title":"Tint Raw"},{"location":"api/#scope-to-style","text":"dict mdpopups . scope2style Takes a sublime scope (complexity doesn't matter), and guesses the style that would be applied. While there may be untested corner cases with complex scopes where it fails, in general, it is usually accurate. The returned dictionary is in the form: { # Colors will be None if not found, # though usually, even if the scope has no color # it will return the overall theme foreground. # # Background might be None if using `explicit_background` # as it only returns a background if that style specifically # defines a background. \"color\" : \"#RRGGBB\" , \"background\" : \"#RRGGBB\" , # Style will usually be either 'bold', 'italic'. # Multiple styles may be returned 'bold italic' or an empty string ''. \"style\" : 'bold italic' } Parameter Type Default Description view sublime . View Sublime text View object so that the correct color scheme will be searched. scope string The scope to search for. selected bool False Whether this scope is in a selected state (selected text). explicit_background bool False Only return a background if one is explicitly defined in the color scheme.","title":"Scope to Style"},{"location":"api/#syntax-highlight","text":"str mdpopups . syntax_highlight Allows for syntax highlighting outside the Markdown environment. You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted. By default, the built-in Sublime syntax highlighter will be used for code highlighting. Parameter Type Default Description view sublime . View Sublime text View object. src str The source code to be converted. No fence tokes are needed ( ``` ). language str None Specifies the language to highlight as. inline bool False Will return the code formatted for inline display. allow_code_wrap bool False Do not convert all the spaces in code blocks to &nbsp; so that wrapping can occur. language_map Dict None Language map that can be passed in to add to the built-in language map. Mainly for Plugins to add plugin specific languages that are too specific to be added globally. New in 4.1.0 Added language_map parameter. See sublime_user_lang_map option to learn more about the structure.","title":"Syntax Highlight"},{"location":"api/#tabs-to-spaces","text":"str mdpopups . tabs2spaces The Markdown parser used converts all tabs to spaces with the simple logic of 1 tab equals 4 spaces. This logic is generally applied in other places like syntax_highlight . When formatting code for syntax_highlight , you may want to translate the tabs to spaces based on tab stops before passing it through opposed to apply the simple logic of converting all tabs to 4 spaces regardless of tab stops. tabs2spaces does exactly this, allowing you format the whitespace in a more intelligent manner. tabs2spaces cannot do anything about characters, and there are some even in monospace fonts, that are wider than normal characters. It doesn't detect zero width characters either. It also cannot predict cases where two or more Unicode character are shown as one. But in some cases, this more intelligent output is much better than the \"all tabs are arbitrarily one size\" logic. Example (Notice that \u266d is a bit larger than normal characters): >>> import mdpopups >>> text = ''' ============================================================ T\\tTp\\tSp\\tD\\tDp\\tS\\tD7\\tT ------------------------------------------------------------ A\\tF#m\\tBm\\tE\\tC#m\\tD\\tE7\\tA A#\\tGm\\tCm\\tF\\tDm\\tD#\\tF7\\tA# B\u266d\\tGm\\tCm\\tF\\tDm\\tE\u266dm\\tF7\\tB\u266d ''' >>> print ( mdpopups . tabs2spaces ( text , tab_size = 8 )) ============================================================ T Tp Sp D Dp S D7 T ------------------------------------------------------------ A F#m Bm E C#m D E7 A A# Gm Cm F Dm D# F7 A# B\u266d Gm Cm F Dm E\u266dm F7 B Parameter Type Default Description text str Text to convert. tab_size int 4 Tab size.","title":"Tabs to Spaces"},{"location":"api/#get-language-from-view","text":"str mdpopups . get_language_from_view Allows a user to extract the equivalent language specifier for mdpopups.syntax_highlight from a view. If the language cannot be determined, None will be returned. Parameter Type Default Description view sublime . View Sublime text View object.","title":"Get Language From View"},{"location":"api/#resolve-remote-images","text":"str mdpopups . resolve_images This was added to download remote images. resolve_images accepts an HTML buffer, a resolver and a callback and will search the HTML buffer for image URLs and download them if appropriate. Since this function can have a resolver that can download the images asynchronously, it is not performed in the main path when showing popups or phantoms. Ideally, this would be used after manually running Markdown through md2html . The following resolve functions are available: Name Description blocking_resolver A blocking image resolver. Will block while download an image. ui_thread_resolver Will execute image downloads on the main thread. worker_thread_resolver Will execute image downloads on the worker (\"async\") thread of Sublime Text. Parameter Type Default Description minihtml str A minihtml string buffer. resolver function A function that resolves an image URL by downloading it. It accepts a URL and callback. on_done function A callback for when the image resolving is complete. Accepts a minihtml string buffer. New in 4.0 This is a new feature added in 4.0, and is currently considered experimental.","title":"Resolve Remote Images"},{"location":"faq/","text":"Frequently Asked Questions Questions Why don't < pre > tags work right when I do them, but MdPopups' work correctly? This is because the HTML engine in Sublime treats < pre > tags just as a normal block elements; it doesn't treat the content as preformatted. When MdPopups creates code blocks, it actually does a lot of special formatting to the blocks. It converts tabs to 4 spaces, and spaces are converted to &nbsp; to prevent wrapping. Lastly, new lines get converted to < br > tags. Why in code blocks do tabs get converted to 4 spaces? Because I like it that way. If you are planning on having a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you like before sending it through the syntax highlighter. Why does <insert element> not work, or cause the popup/phantom not to show? Because Sublime's HTML engine is extremely limited or the element you are trying to use hasn't been styled correctly yet. Though I do not have a complete list of all supported elements, you can check out the provided default.css on the repository to see what is supported. There are probably some elements you could style and then would work correctly, but there are others like < table > will not currently work. In general, you should keep things basic, but feel free to experiment to get an understanding of Sublime's minihtml engine limitations.","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#questions","text":"Why don't < pre > tags work right when I do them, but MdPopups' work correctly? This is because the HTML engine in Sublime treats < pre > tags just as a normal block elements; it doesn't treat the content as preformatted. When MdPopups creates code blocks, it actually does a lot of special formatting to the blocks. It converts tabs to 4 spaces, and spaces are converted to &nbsp; to prevent wrapping. Lastly, new lines get converted to < br > tags. Why in code blocks do tabs get converted to 4 spaces? Because I like it that way. If you are planning on having a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you like before sending it through the syntax highlighter. Why does <insert element> not work, or cause the popup/phantom not to show? Because Sublime's HTML engine is extremely limited or the element you are trying to use hasn't been styled correctly yet. Though I do not have a complete list of all supported elements, you can check out the provided default.css on the repository to see what is supported. There are probably some elements you could style and then would work correctly, but there are others like < table > will not currently work. In general, you should keep things basic, but feel free to experiment to get an understanding of Sublime's minihtml engine limitations.","title":"Questions"},{"location":"installation/","text":"Installation Package Control In order for your plugin to utilize Markdown Popups, you must be using Package Control , and you must add mdpopups (and other related dependencies) as a dependency for your plugin. This can be done in one of two ways, both of which are documented by Package Control; see Using Dependencies . Package Control will install and update the dependency for you. Package Control will also ensure that mdpopups is loaded before your plugin loads. If ever you are on a older version than is currently released, and Package Control has not updated to the latest, you can force the update by running the Package Control: Satisfy Dependencies command from the command palette. Remember, MdPopups is for Sublime Text 3 builds 3124+.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"In order for your plugin to utilize Markdown Popups, you must be using Package Control , and you must add mdpopups (and other related dependencies) as a dependency for your plugin. This can be done in one of two ways, both of which are documented by Package Control; see Using Dependencies . Package Control will install and update the dependency for you. Package Control will also ensure that mdpopups is loaded before your plugin loads. If ever you are on a older version than is currently released, and Package Control has not updated to the latest, you can force the update by running the Package Control: Satisfy Dependencies command from the command palette. Remember, MdPopups is for Sublime Text 3 builds 3124+.","title":"Package Control"},{"location":"settings/","text":"User Settings Configuring MdPopups All settings for MdPopups are placed in Sublime's Preferences.sublime-settings . They are applied globally and to all popups and phantoms. mdpopups.debug Turns on debug mode. This will dump out all sorts of info to the console. Content before parsing to HTML, final HTML output, traceback from failures, etc.. This is more useful for plugin developers. It works by specifying an error level. 0 or false would disable it. 1 would trigger on errors. 2 would trigger on warnings and any level below. 3 would be general info (like HTML output) and any level below. \"mdpopups.debug\" : 1 , mdpopups.disable Global kill switch to prevent popups (created by MdPopups) from appearing. \"mdpopups.disable\" : true , mdpopups.cache_refresh_time Control how long a CSS theme file will be in the cache before being refreshed. Value should be a positive integer greater than 0 . Units are in minutes. Default is 30 . \"mdpopups.cache_refresh_time\" : 30 , mdpopups.cache_limit Control how many CSS theme files will be kept in cache at any given time. Value should be a positive integer greater than or equal to 0 . \"mdpopups.cache_limit\" : 10 mdpopups.use_sublime_highlighter Controls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting. This affects code highlighting in Markdown conversion and when code is directly processed using syntax_highlight . To learn more about the syntax highlighter see Syntax Highlighting . \"mdpopups.use_sublime_highlighter\" : true mdpopups.user_css Overrides the default CSS and/or CSS of a plugin. Value should be a relative path pointing to the CSS file: Packages/User/my_custom_theme.css . Slashes should be forward slashes. By default, it will point to Packages/User/mdpopups.css . User CSS overrides all CSS as it is the last to be processed. \"mdpopups.user_css\" : \"Packages/User/mdpopups.css\" mdpopups.default_style Controls whether MdPopups' default styling (contained in default.css ) will be applied or not. mdpopups.sublime_user_lang_map This setting is for the Sublime Syntax Highlighter and allows the mapping of personal Sublime syntax languages which are not yet included, or will not be included, in the official mapping table. You can either define your own new entry, or use the same language name of an existing entry to extend the language mapping_alias or syntax languages. When extending, the user mappings will be cycled through first. \"mdpopups.sublime_user_lang_map\" : { \"language\" : [[ \"mapping_alias\" ], [ \"MyPackage/MySyntaxLanguage\" ]] } Example : \"mdpopups.sublime_user_lang_map\" : { \"javascript\" : [[ \"javascript\" , \"js\" ], [ \"JavaScript/JavaScript\" , \"JavaScriptNext - ES6 Syntax/JavaScriptNext\" ]] } For a list of all currently supported syntax mappings, see the official mapping file . Tip When submitting new languages to the mapping table, it is encouraged to pick key names that correspond to what is used in Pygments so a User can switch between Pygments' and Sublime's syntax highlighter and still get highlighting.","title":"User Settings"},{"location":"settings/#user-settings","text":"","title":"User Settings"},{"location":"settings/#configuring-mdpopups","text":"All settings for MdPopups are placed in Sublime's Preferences.sublime-settings . They are applied globally and to all popups and phantoms.","title":"Configuring MdPopups"},{"location":"settings/#mdpopupsdebug","text":"Turns on debug mode. This will dump out all sorts of info to the console. Content before parsing to HTML, final HTML output, traceback from failures, etc.. This is more useful for plugin developers. It works by specifying an error level. 0 or false would disable it. 1 would trigger on errors. 2 would trigger on warnings and any level below. 3 would be general info (like HTML output) and any level below. \"mdpopups.debug\" : 1 ,","title":"mdpopups.debug"},{"location":"settings/#mdpopupsdisable","text":"Global kill switch to prevent popups (created by MdPopups) from appearing. \"mdpopups.disable\" : true ,","title":"mdpopups.disable"},{"location":"settings/#mdpopupscache_refresh_time","text":"Control how long a CSS theme file will be in the cache before being refreshed. Value should be a positive integer greater than 0 . Units are in minutes. Default is 30 . \"mdpopups.cache_refresh_time\" : 30 ,","title":"mdpopups.cache_refresh_time"},{"location":"settings/#mdpopupscache_limit","text":"Control how many CSS theme files will be kept in cache at any given time. Value should be a positive integer greater than or equal to 0 . \"mdpopups.cache_limit\" : 10","title":"mdpopups.cache_limit"},{"location":"settings/#mdpopupsuse_sublime_highlighter","text":"Controls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting. This affects code highlighting in Markdown conversion and when code is directly processed using syntax_highlight . To learn more about the syntax highlighter see Syntax Highlighting . \"mdpopups.use_sublime_highlighter\" : true","title":"mdpopups.use_sublime_highlighter"},{"location":"settings/#mdpopupsuser_css","text":"Overrides the default CSS and/or CSS of a plugin. Value should be a relative path pointing to the CSS file: Packages/User/my_custom_theme.css . Slashes should be forward slashes. By default, it will point to Packages/User/mdpopups.css . User CSS overrides all CSS as it is the last to be processed. \"mdpopups.user_css\" : \"Packages/User/mdpopups.css\"","title":"mdpopups.user_css"},{"location":"settings/#mdpopupsdefault_style","text":"Controls whether MdPopups' default styling (contained in default.css ) will be applied or not.","title":"mdpopups.default_style"},{"location":"settings/#mdpopupssublime_user_lang_map","text":"This setting is for the Sublime Syntax Highlighter and allows the mapping of personal Sublime syntax languages which are not yet included, or will not be included, in the official mapping table. You can either define your own new entry, or use the same language name of an existing entry to extend the language mapping_alias or syntax languages. When extending, the user mappings will be cycled through first. \"mdpopups.sublime_user_lang_map\" : { \"language\" : [[ \"mapping_alias\" ], [ \"MyPackage/MySyntaxLanguage\" ]] } Example : \"mdpopups.sublime_user_lang_map\" : { \"javascript\" : [[ \"javascript\" , \"js\" ], [ \"JavaScript/JavaScript\" , \"JavaScriptNext - ES6 Syntax/JavaScriptNext\" ]] } For a list of all currently supported syntax mappings, see the official mapping file . Tip When submitting new languages to the mapping table, it is encouraged to pick key names that correspond to what is used in Pygments so a User can switch between Pygments' and Sublime's syntax highlighter and still get highlighting.","title":"mdpopups.sublime_user_lang_map"},{"location":"styling/","text":"CSS Styling Syntax Highlighting MdPopups has two syntax highlighting methods: the native Sublime syntax highlighter (default) and Pygments. When developing a plugin, it is wise to test out both. The native Sublime Syntax Highlighter has most default languages mapped along with a few others. Sublime Syntax Highlighter As previously mentioned, MdPopups uses the internal syntax highlighter to highlight your code. The benefit here is that you get code highlighting in your popup that matches your current theme. The highlighting ability is dependent upon what syntax packages you have installed in Sublime. It also depends on whether that syntax is enabled and mapped to a language keyword. Pull requests are welcome to expand and keep the language mapping updated. You can also define in your Preferences.sublime-settings file additional mappings. See mdpopups.sublime_user_lang_map for more info. Most users prefer using syntax highlighting that matches their current color scheme. If you are a developer, it is recommended to issue a pull request to add missing languages you need to the mapping. Optionally you can also describe how users can map what they need locally. Pygments In order to use Pygments, you have to disable mdpopups.use_sublime_highlighter . Pygments has a great variety of highlighters out of the box. It also comes with a number of built-in color schemes that can be used. When enabling Pygments, you must specify the color scheme to use in your user CSS using the CSS template filter . /* Syntax Highlighting */ {% - if var.use_pygments %} {% - if var.is_light %} {{ 'default' | pygments }} {% - else %} {{ 'native' | pygments }} {% - endif %} {% - endif %} You can also paste your own custom Pygments CSS directly into your User CSS, but you will have to format it to work properly. Pygments defines special classes for each span that needs to be highlighted in a coding block. Pygments CSS classes are not only given syntax classes that are applied to each span, but usually an overall class is assigned to a < div > wrapper as well. For instance, a class for whitespace may look like this (where . highlight is the div wrapper's class and . w i the span's class): . highlight . w { color : #cccccc } /* Text.Whitespace */ If doing your own, the Pygments CSS should define a rule to highlight general background and foregrounds. . mdpopups . highlight { background-color : #f8f8f8 ; color : #4d4d4c } Full Pygments CSS Example . mdpopups . highlight { background-color : #f8f8f8 ; color : #4d4d4c } . mdpopups . highlight . c { color : #8e908c ; font-style : italic } /* Comment */ . mdpopups . highlight . err { color : #c82829 } /* Error */ . mdpopups . highlight . k { color : #8959a8 ; font-weight : bold } /* Keyword */ . mdpopups . highlight . l { color : #f5871f } /* Literal */ . mdpopups . highlight . n { color : #4d4d4c } /* Name */ . mdpopups . highlight . o { color : #3e999f } /* Operator */ . mdpopups . highlight . p { color : #4d4d4c } /* Punctuation */ . mdpopups . highlight . cm { color : #8e908c ; font-style : italic } /* Comment.Multiline */ . mdpopups . highlight . cp { color : #8e908c ; font-weight : bold } /* Comment.Preproc */ . mdpopups . highlight . c1 { color : #8e908c ; font-style : italic } /* Comment.Single */ . mdpopups . highlight . cs { color : #8e908c ; font-style : italic } /* Comment.Special */ . mdpopups . highlight . gd { color : #c82829 } /* Generic.Deleted */ . mdpopups . highlight . ge { font-style : italic } /* Generic.Emph */ . mdpopups . highlight . gh { color : #4d4d4c ; font-weight : bold } /* Generic.Heading */ . mdpopups . highlight . gi { color : #718c00 } /* Generic.Inserted */ . mdpopups . highlight . gp { color : #8e908c ; font-weight : bold } /* Generic.Prompt */ . mdpopups . highlight . gs { font-weight : bold } /* Generic.Strong */ . mdpopups . highlight . gu { color : #3e999f ; font-weight : bold } /* Generic.Subheading */ . mdpopups . highlight . kc { color : #8959a8 ; font-weight : bold } /* Keyword.Constant */ . mdpopups . highlight . kd { color : #8959a8 ; font-weight : bold } /* Keyword.Declaration */ . mdpopups . highlight . kn { color : #8959a8 ; font-weight : bold } /* Keyword.Namespace */ . mdpopups . highlight . kp { color : #8959a8 ; font-weight : bold } /* Keyword.Pseudo */ . mdpopups . highlight . kr { color : #8959a8 ; font-weight : bold } /* Keyword.Reserved */ . mdpopups . highlight . kt { color : #eab700 ; font-weight : bold } /* Keyword.Type */ . mdpopups . highlight . ld { color : #718c00 } /* Literal.Date */ . mdpopups . highlight . m { color : #f5871f } /* Literal.Number */ . mdpopups . highlight . s { color : #718c00 } /* Literal.String */ . mdpopups . highlight . na { color : #4271ae } /* Name.Attribute */ . mdpopups . highlight . nb { color : #4271ae } /* Name.Builtin */ . mdpopups . highlight . nc { color : #c82829 ; font-weight : bold } /* Name.Class */ . mdpopups . highlight . no { color : #c82829 } /* Name.Constant */ . mdpopups . highlight . nd { color : #3e999f } /* Name.Decorator */ . mdpopups . highlight . ni { color : #4d4d4c } /* Name.Entity */ . mdpopups . highlight . ne { color : #c82829 ; font-weight : bold } /* Name.Exception */ . mdpopups . highlight . nf { color : #4271ae ; font-weight : bold } /* Name.Function */ . mdpopups . highlight . nl { color : #4d4d4c } /* Name.Label */ . mdpopups . highlight . nn { color : #4d4d4c } /* Name.Namespace */ . mdpopups . highlight . nx { color : #4271ae } /* Name.Other */ . mdpopups . highlight . py { color : #4d4d4c } /* Name.Property */ . mdpopups . highlight . nt { color : #c82829 } /* Name.Tag */ . mdpopups . highlight . nv { color : #c82829 } /* Name.Variable */ . mdpopups . highlight . ow { color : #3e999f } /* Operator.Word */ . mdpopups . highlight . w { color : #4d4d4c } /* Text.Whitespace */ . mdpopups . highlight . mb { color : #f5871f } /* Literal.Number.Bin */ . mdpopups . highlight . mf { color : #f5871f } /* Literal.Number.Float */ . mdpopups . highlight . mh { color : #f5871f } /* Literal.Number.Hex */ . mdpopups . highlight . mi { color : #f5871f } /* Literal.Number.Integer */ . mdpopups . highlight . mo { color : #f5871f } /* Literal.Number.Oct */ . mdpopups . highlight . sb { color : #718c00 } /* Literal.String.Backtick */ . mdpopups . highlight . sc { color : #4d4d4c } /* Literal.String.Char */ . mdpopups . highlight . sd { color : #8e908c } /* Literal.String.Doc */ . mdpopups . highlight . s2 { color : #718c00 } /* Literal.String.Double */ . mdpopups . highlight . se { color : #f5871f } /* Literal.String.Escape */ . mdpopups . highlight . sh { color : #718c00 } /* Literal.String.Heredoc */ . mdpopups . highlight . si { color : #f5871f } /* Literal.String.Interpol */ . mdpopups . highlight . sx { color : #718c00 } /* Literal.String.Other */ . mdpopups . highlight . sr { color : #718c00 } /* Literal.String.Regex */ . mdpopups . highlight . s1 { color : #718c00 } /* Literal.String.Single */ . mdpopups . highlight . ss { color : #718c00 } /* Literal.String.Symbol */ . mdpopups . highlight . bp { color : #f5871f } /* Name.Builtin.Pseudo */ . mdpopups . highlight . vc { color : #c82829 } /* Name.Variable.Class */ . mdpopups . highlight . vg { color : #c82829 } /* Name.Variable.Global */ . mdpopups . highlight . vi { color : #c82829 } /* Name.Variable.Instance */ . mdpopups . highlight . il { color : #f5871f } /* Literal.Number.Integer.Long */ CSS Styling One reason MdPopups was created was to give consistent popups across plugins. Originally MdPopups forced its style so that plugins couldn't override the it. Later it was realized that plugins may have reasons to override certain things, and in recent versions, this constraint was relaxed. Despite changes since its inception, one thing has stayed the same: the user has the last say in how popups work. This is achieved by controlling which CSS gets loaded when. st=>operation: Sublime CSS/Color Scheme CSS md=>operation: MdPopups Default CSS pg=>operation: Plugin CSS us=>operation: User CSS st->md->pg->us Sublime first provides its CSS which includes some basic styling and CSS from color schemes. MdPopups provides its own default CSS that styles the common HTML tags and provides minimal colors. Plugins come next and extend the CSS with plugin specific CSS. The user's CSS is loaded last and can override anything. All CSS is passed through the Jinja2 template engine where special filters can provide things like appropriate CSS that matches your color scheme for a specific scope, load additional CSS from another source, have condition logic for specific Sublime and/or MdPopups versions, or even provide CSS for specific color schemes. Templates are used so that a user can easily tap into all the colors, color filters, and other useful logic to control their popups and phantoms in one place without having to hard code a specific CSS for a specific color scheme. In general, it is encouraged to use Sublime CSS variables such as --redish , --bluish , etc. to get appropriate colors for a given theme. Sublime calculates these colors from the color scheme directly. If it calculates a color that is not quite right, you can always request that the color scheme in question redefines that variable with an appropriate color. Or you, as the user, can define one in your user CSS. You can read more about minihtml and it's features in the minihtml documentation . MdPopups also provides its own CSS variables that can be overridden by a user: Variable Description --mdpopups-font-mono Monospace font stack for elements that require monospace (like code blocks). --mdpopups-fg Foreground color. --mdpopups-bg Background color. --mdpopups-link Hyperlink color. --mdpopups-hr < hr > tag color. --mdpopups-admon-fg General admonition foreground/text color. --mdpopups-admon-info-fg Info admonition foreground/text color. --mdpopups-admon-error-fg Error admonition foreground/text color. --mdpopups-admon-success-fg Success admonition foreground/text color. --mdpopups-admon-warning-fg Warning admonition foreground/text color. --mdpopups-admon-title-fg General admonition title foreground/text color. --mdpopups-admon-info-title-fg Info admonition title foreground/text color. --mdpopups-admon-error-title-fg Error admonition title foreground/text color. --mdpopups-admon-success-title-fg Success admonition title foreground/text color. --mdpopups-admon-warning-title-fg Warning admonition title foreground/text color. --mdpopups-admon-bg General admonition background color. --mdpopups-admon-info-bg Info admonition background color. --mdpopups-admon-error-bg Error admonition background color. --mdpopups-admon-warning-bg Warning admonition background color. --mdpopups-admon-success-bg Success admonition background color. --mdpopups-admon-accent General admonition accent color (border/title bar background). --mdpopups-admon-info-accent Info admonition accent color (border/title bar background). --mdpopups-admon-error-accent Error admonition accent color (border/title bar background). --mdpopups-admon-success-accent Success admonition accent color (border/title bar background). --mdpopups-admon-warning-accent Warning admonition accent color (border/title bar background). --mdpopups-kbd-fg < kbd > foreground/text color. --mdpopups-kbd-bg < kbd > background color. --mdpopups-kbd-border < kbd > border color. --mdpopups-hl-border Inline and block code border color. --mdpopups-hl-bg Inline and block code background color. CSS Templates All variables and filters provided by default only apply to the CSS, not the markdown or HTML content. The default provided variables are namespaced under var . The Markdown and HTML content only receives the variables that are given via template_vars parameters and any options via the template_env_options ; user defined variables will get passed to the CSS, but not the options. User defined variables will be namespaced under plugin . CSS Filter With the template environment, colors and style from the current Sublime color scheme can be accessed and manipulated. Access to the Sublime color scheme styles CSS is done via the css filter. css Retrieves the style for a specific Sublime scope from a Sublime color scheme. By specifying either foreground , background , or any scope (complexity doesn't really matter) and feeding it into the css filter, all the related styling of the specified scope will be inserted as CSS into the CSS document. Example : This: h1 , h2 , h3 , h4 , h5 , h6 { {{ 'comment' | css }} } Might become this: h1 , h2 , h3 , h4 , h5 , h6 { color : #888888 ; font-style : italic ; } Notice that the format of insertion is key: value; . You do not need a semicolon after as the CSS lines are all formatted properly with semicolons. If you add one, you may get multiple semicolons which may break the CSS. If you need to get at a specific CSS attribute, you can specify its name in the css filter (available attributes are color , background-color , font-style , and font-weight ). This: h1 , h2 , h3 , h4 , h5 , h6 { {{ '.comment' | css ( 'color' ) }} } Would then only include the color: h1 , h2 , h3 , h4 , h5 , h6 { color : #888888 ; } In general, a foreground color is always returned, but by default, a background color is only returned if one is explicitly defined. To always get a background (which most likely will default to the overall scheme background), you can set the additional explicit_background parameter to False . /* If `keyword.operator` is not explicitly used, fallback to `.keyword` */ h1 , h2 , h3 , h4 , h5 , h6 { {{ 'keyword.operator' | css ( 'color' , False ) }} } Color Filters MdPopups also provides a number of color filters within the template environment that can manipulate the CSS colors returned from the css filter (or equivalent formatted CSS). These filters will strip out the color and modify it, and return the appropriate CSS. To manipulate a color value directly, you can use Sublime's built in color blending. In most cases, it is advised to use Sublime's color blending functionality, but these are available to aid those who wish to access and manipulate CSS of scopes directly. See Sublime's minihtml documentation for more info. Even though Sublime generally provides contrast to popups, lets pretend you had a popup that was the same color as the view window and it was difficult to see where the popup starts and ends. You can take the color schemes background and apply a brightness filter to it allowing you now see the popup clearly. Here we can make the background of the popup darker: . mdpopups div . myplugin { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } Color filters take a single color attribute of the form key: value; . So when feeding the color template filters your CSS via the css filter, you should specify the color attribute ( background-color or color ) that you wish to apply the filter to; it may be difficult to tell how many attributes css could return without explicitly specifying attribute. Color filters only take either color or background-color attributes. Filters can be chained if more intensity is needed (as some filters may clamp the value in one call), or if you want to apply multiple filters. These are all the available filters: foreground and background If desired, you can convert a foreground color to a background color or vice versa. To convert to a foreground color, you can use the foreground filter. To convert to a background color, you can use the background filter. Remember, this is augmenting the CSS returned by the css filter, you can't just give it a color. To convert a background to a foreground. Example : body { {{ '.background' | css ( 'background-color' )| foreground }} } To convert a foreground to a background. Example : body { {{ '.foreground' | css ( 'color' )| background }} } brightness Shifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change. Accepted values are floats that are greater than 0 . Ranges are clamped between 0 and 2 . Example - Darken : body { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } Example - Lighten : body { {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }} } contrast Increases/decreases the contrast. Contrast is relative to 1 where 1 means no change. Accepted values are floats that are greater than 0 . Ranges are clamped between 0 and 2 . Example - Decrease contrast : body { {{ '.background' | css ( 'background-color' )| contrast ( 0.9 ) }} } Example - Increase contrast : body { {{ '.background' | css ( 'background-color' )| contrast ( 1.1 ) }} } saturation Shifts the saturation either to right (saturate) or the left (desaturate). Saturation is relative to 1 where 1 means no change. Accepted values are floats that are greater than 0 . Ranges are clamped between 0 and 2 . Example - Desaturate : body { {{ '.background' | css ( 'background-color' )| saturation ( 0.9 ) }} } Example - Saturate : body { {{ '.background' | css ( 'background-color' )| saturation ( 1.1 ) }} } grayscale Filters all colors to a grayish tone. Example : body { {{ '.background' | css ( 'background-color' )| grayscale }} } sepia Filters all colors to a sepia tone. Example : body { {{ '.background' | css ( 'background-color' )| sepia }} } invert Inverts a color. Example : body { {{ '.background' | css ( 'background-color' )| invert }} } colorize Filters all colors to a shade of the specified hue. Think grayscale, but instead of gray, you define a non-gray hue. The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0. Example : body { {{ '.background' | css ( 'background-color' )| colorize ( 30 ) }} } hue Shifts the current hue either to the left or right. The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0. Values can either be negative to shift left or positive to shift the hue to the right. Example - Left Shift : body { {{ '.background' | css ( 'background-color' )| hue (- 30 ) }} } Example - Left Right : body { {{ '.background' | css ( 'background-color' )| hue ( 30 ) }} } fade Fades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through. Example - Fade 50% : body { {{ '.foreground' | css ( 'color' )| fade ( 0.5 ) }} } Include CSS Filter The template environment allows for retrieving CSS resources from Sublime Packages or built-in Pygments CSS from the Pygments library. getcss Retrieve a CSS file from Sublime's Packages folder. CSS retrieved in this manner can include template variables and filters. Example : {{ 'Packages/User/aprosopo-dark.css' | getcss }} pygments Retrieve a built-in Pygments color scheme. Example : {{ 'native' | pygments }} Template Variables The template environment provides a couple of variables that can be used to conditionally alter the CSS output. Variables are found under var . var.sublime_version sublime_version contains the current Sublime Text version. This allows you conditionally handle CSS features that are specific to a Sublime Text version. Example {% if var.sublime_version >= 3119 %} padding : 0 . 2rem ; {% else %} padding : 0 . 2em ; {% endif %} var.mdpopups_version mdpopups_version contains the current MdPopups version which you can use in your CSS templates if needed. Example {% if var.mdpopups_version >= ( 1 , 9 , 0 ) %} /* do something */ {% else %} /* do something else */ {% endif %} var.default_style Flag specifying whether default styling is being used. See mdpopups.default_style for how to control this flag. And see default.css for an example of how it is used. var.is_dark and var.is_light is_dark checks if the color scheme is a dark color scheme. Alternatively, is_light checks if the color scheme is a light color scheme. Example : {% if var.is_light %} html { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } {% else %} html { {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }} } {% endif %} var.is_popup , var.is_phantom , and var.is_sheet is_phantom checks if the current CSS is for a phantom instead of a popup. Alternatively, is_popup and is_sheet checks if the current use of the CSS is for a popup or HTML sheet respectively. Example : {% if var.is_phantom %} html { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } {% else %} html { {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }} } {% endif %} var.use_pygments Checks if the Pygments syntax highlighter is being used. Example : {% if var.use_pygments %} {% if var.is_light %} {{ 'default' | pygments }} {% else %} {{ 'native' | pygments }} {% endif %} {% endif %} var.color_scheme Retrieves the current color schemes name. Example : {% if ( var.color_scheme in ( 'Packages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme' , 'Packages/Theme - Aprosopo/Tomorrow-Morning.tmTheme' , ) ) %} a { {{ '.keyword.operator' | css ( 'color' ) }} } {% else %} a { {{ '.support.function' | css ( 'color' ) }} } {% endif %}","title":"CSS Styling"},{"location":"styling/#css-styling","text":"","title":"CSS Styling"},{"location":"styling/#syntax-highlighting","text":"MdPopups has two syntax highlighting methods: the native Sublime syntax highlighter (default) and Pygments. When developing a plugin, it is wise to test out both. The native Sublime Syntax Highlighter has most default languages mapped along with a few others.","title":"Syntax Highlighting"},{"location":"styling/#sublime-syntax-highlighter","text":"As previously mentioned, MdPopups uses the internal syntax highlighter to highlight your code. The benefit here is that you get code highlighting in your popup that matches your current theme. The highlighting ability is dependent upon what syntax packages you have installed in Sublime. It also depends on whether that syntax is enabled and mapped to a language keyword. Pull requests are welcome to expand and keep the language mapping updated. You can also define in your Preferences.sublime-settings file additional mappings. See mdpopups.sublime_user_lang_map for more info. Most users prefer using syntax highlighting that matches their current color scheme. If you are a developer, it is recommended to issue a pull request to add missing languages you need to the mapping. Optionally you can also describe how users can map what they need locally.","title":"Sublime Syntax Highlighter"},{"location":"styling/#pygments","text":"In order to use Pygments, you have to disable mdpopups.use_sublime_highlighter . Pygments has a great variety of highlighters out of the box. It also comes with a number of built-in color schemes that can be used. When enabling Pygments, you must specify the color scheme to use in your user CSS using the CSS template filter . /* Syntax Highlighting */ {% - if var.use_pygments %} {% - if var.is_light %} {{ 'default' | pygments }} {% - else %} {{ 'native' | pygments }} {% - endif %} {% - endif %} You can also paste your own custom Pygments CSS directly into your User CSS, but you will have to format it to work properly. Pygments defines special classes for each span that needs to be highlighted in a coding block. Pygments CSS classes are not only given syntax classes that are applied to each span, but usually an overall class is assigned to a < div > wrapper as well. For instance, a class for whitespace may look like this (where . highlight is the div wrapper's class and . w i the span's class): . highlight . w { color : #cccccc } /* Text.Whitespace */ If doing your own, the Pygments CSS should define a rule to highlight general background and foregrounds. . mdpopups . highlight { background-color : #f8f8f8 ; color : #4d4d4c } Full Pygments CSS Example . mdpopups . highlight { background-color : #f8f8f8 ; color : #4d4d4c } . mdpopups . highlight . c { color : #8e908c ; font-style : italic } /* Comment */ . mdpopups . highlight . err { color : #c82829 } /* Error */ . mdpopups . highlight . k { color : #8959a8 ; font-weight : bold } /* Keyword */ . mdpopups . highlight . l { color : #f5871f } /* Literal */ . mdpopups . highlight . n { color : #4d4d4c } /* Name */ . mdpopups . highlight . o { color : #3e999f } /* Operator */ . mdpopups . highlight . p { color : #4d4d4c } /* Punctuation */ . mdpopups . highlight . cm { color : #8e908c ; font-style : italic } /* Comment.Multiline */ . mdpopups . highlight . cp { color : #8e908c ; font-weight : bold } /* Comment.Preproc */ . mdpopups . highlight . c1 { color : #8e908c ; font-style : italic } /* Comment.Single */ . mdpopups . highlight . cs { color : #8e908c ; font-style : italic } /* Comment.Special */ . mdpopups . highlight . gd { color : #c82829 } /* Generic.Deleted */ . mdpopups . highlight . ge { font-style : italic } /* Generic.Emph */ . mdpopups . highlight . gh { color : #4d4d4c ; font-weight : bold } /* Generic.Heading */ . mdpopups . highlight . gi { color : #718c00 } /* Generic.Inserted */ . mdpopups . highlight . gp { color : #8e908c ; font-weight : bold } /* Generic.Prompt */ . mdpopups . highlight . gs { font-weight : bold } /* Generic.Strong */ . mdpopups . highlight . gu { color : #3e999f ; font-weight : bold } /* Generic.Subheading */ . mdpopups . highlight . kc { color : #8959a8 ; font-weight : bold } /* Keyword.Constant */ . mdpopups . highlight . kd { color : #8959a8 ; font-weight : bold } /* Keyword.Declaration */ . mdpopups . highlight . kn { color : #8959a8 ; font-weight : bold } /* Keyword.Namespace */ . mdpopups . highlight . kp { color : #8959a8 ; font-weight : bold } /* Keyword.Pseudo */ . mdpopups . highlight . kr { color : #8959a8 ; font-weight : bold } /* Keyword.Reserved */ . mdpopups . highlight . kt { color : #eab700 ; font-weight : bold } /* Keyword.Type */ . mdpopups . highlight . ld { color : #718c00 } /* Literal.Date */ . mdpopups . highlight . m { color : #f5871f } /* Literal.Number */ . mdpopups . highlight . s { color : #718c00 } /* Literal.String */ . mdpopups . highlight . na { color : #4271ae } /* Name.Attribute */ . mdpopups . highlight . nb { color : #4271ae } /* Name.Builtin */ . mdpopups . highlight . nc { color : #c82829 ; font-weight : bold } /* Name.Class */ . mdpopups . highlight . no { color : #c82829 } /* Name.Constant */ . mdpopups . highlight . nd { color : #3e999f } /* Name.Decorator */ . mdpopups . highlight . ni { color : #4d4d4c } /* Name.Entity */ . mdpopups . highlight . ne { color : #c82829 ; font-weight : bold } /* Name.Exception */ . mdpopups . highlight . nf { color : #4271ae ; font-weight : bold } /* Name.Function */ . mdpopups . highlight . nl { color : #4d4d4c } /* Name.Label */ . mdpopups . highlight . nn { color : #4d4d4c } /* Name.Namespace */ . mdpopups . highlight . nx { color : #4271ae } /* Name.Other */ . mdpopups . highlight . py { color : #4d4d4c } /* Name.Property */ . mdpopups . highlight . nt { color : #c82829 } /* Name.Tag */ . mdpopups . highlight . nv { color : #c82829 } /* Name.Variable */ . mdpopups . highlight . ow { color : #3e999f } /* Operator.Word */ . mdpopups . highlight . w { color : #4d4d4c } /* Text.Whitespace */ . mdpopups . highlight . mb { color : #f5871f } /* Literal.Number.Bin */ . mdpopups . highlight . mf { color : #f5871f } /* Literal.Number.Float */ . mdpopups . highlight . mh { color : #f5871f } /* Literal.Number.Hex */ . mdpopups . highlight . mi { color : #f5871f } /* Literal.Number.Integer */ . mdpopups . highlight . mo { color : #f5871f } /* Literal.Number.Oct */ . mdpopups . highlight . sb { color : #718c00 } /* Literal.String.Backtick */ . mdpopups . highlight . sc { color : #4d4d4c } /* Literal.String.Char */ . mdpopups . highlight . sd { color : #8e908c } /* Literal.String.Doc */ . mdpopups . highlight . s2 { color : #718c00 } /* Literal.String.Double */ . mdpopups . highlight . se { color : #f5871f } /* Literal.String.Escape */ . mdpopups . highlight . sh { color : #718c00 } /* Literal.String.Heredoc */ . mdpopups . highlight . si { color : #f5871f } /* Literal.String.Interpol */ . mdpopups . highlight . sx { color : #718c00 } /* Literal.String.Other */ . mdpopups . highlight . sr { color : #718c00 } /* Literal.String.Regex */ . mdpopups . highlight . s1 { color : #718c00 } /* Literal.String.Single */ . mdpopups . highlight . ss { color : #718c00 } /* Literal.String.Symbol */ . mdpopups . highlight . bp { color : #f5871f } /* Name.Builtin.Pseudo */ . mdpopups . highlight . vc { color : #c82829 } /* Name.Variable.Class */ . mdpopups . highlight . vg { color : #c82829 } /* Name.Variable.Global */ . mdpopups . highlight . vi { color : #c82829 } /* Name.Variable.Instance */ . mdpopups . highlight . il { color : #f5871f } /* Literal.Number.Integer.Long */","title":"Pygments"},{"location":"styling/#css-styling_1","text":"One reason MdPopups was created was to give consistent popups across plugins. Originally MdPopups forced its style so that plugins couldn't override the it. Later it was realized that plugins may have reasons to override certain things, and in recent versions, this constraint was relaxed. Despite changes since its inception, one thing has stayed the same: the user has the last say in how popups work. This is achieved by controlling which CSS gets loaded when. st=>operation: Sublime CSS/Color Scheme CSS md=>operation: MdPopups Default CSS pg=>operation: Plugin CSS us=>operation: User CSS st->md->pg->us Sublime first provides its CSS which includes some basic styling and CSS from color schemes. MdPopups provides its own default CSS that styles the common HTML tags and provides minimal colors. Plugins come next and extend the CSS with plugin specific CSS. The user's CSS is loaded last and can override anything. All CSS is passed through the Jinja2 template engine where special filters can provide things like appropriate CSS that matches your color scheme for a specific scope, load additional CSS from another source, have condition logic for specific Sublime and/or MdPopups versions, or even provide CSS for specific color schemes. Templates are used so that a user can easily tap into all the colors, color filters, and other useful logic to control their popups and phantoms in one place without having to hard code a specific CSS for a specific color scheme. In general, it is encouraged to use Sublime CSS variables such as --redish , --bluish , etc. to get appropriate colors for a given theme. Sublime calculates these colors from the color scheme directly. If it calculates a color that is not quite right, you can always request that the color scheme in question redefines that variable with an appropriate color. Or you, as the user, can define one in your user CSS. You can read more about minihtml and it's features in the minihtml documentation . MdPopups also provides its own CSS variables that can be overridden by a user: Variable Description --mdpopups-font-mono Monospace font stack for elements that require monospace (like code blocks). --mdpopups-fg Foreground color. --mdpopups-bg Background color. --mdpopups-link Hyperlink color. --mdpopups-hr < hr > tag color. --mdpopups-admon-fg General admonition foreground/text color. --mdpopups-admon-info-fg Info admonition foreground/text color. --mdpopups-admon-error-fg Error admonition foreground/text color. --mdpopups-admon-success-fg Success admonition foreground/text color. --mdpopups-admon-warning-fg Warning admonition foreground/text color. --mdpopups-admon-title-fg General admonition title foreground/text color. --mdpopups-admon-info-title-fg Info admonition title foreground/text color. --mdpopups-admon-error-title-fg Error admonition title foreground/text color. --mdpopups-admon-success-title-fg Success admonition title foreground/text color. --mdpopups-admon-warning-title-fg Warning admonition title foreground/text color. --mdpopups-admon-bg General admonition background color. --mdpopups-admon-info-bg Info admonition background color. --mdpopups-admon-error-bg Error admonition background color. --mdpopups-admon-warning-bg Warning admonition background color. --mdpopups-admon-success-bg Success admonition background color. --mdpopups-admon-accent General admonition accent color (border/title bar background). --mdpopups-admon-info-accent Info admonition accent color (border/title bar background). --mdpopups-admon-error-accent Error admonition accent color (border/title bar background). --mdpopups-admon-success-accent Success admonition accent color (border/title bar background). --mdpopups-admon-warning-accent Warning admonition accent color (border/title bar background). --mdpopups-kbd-fg < kbd > foreground/text color. --mdpopups-kbd-bg < kbd > background color. --mdpopups-kbd-border < kbd > border color. --mdpopups-hl-border Inline and block code border color. --mdpopups-hl-bg Inline and block code background color.","title":"CSS Styling"},{"location":"styling/#css-templates","text":"All variables and filters provided by default only apply to the CSS, not the markdown or HTML content. The default provided variables are namespaced under var . The Markdown and HTML content only receives the variables that are given via template_vars parameters and any options via the template_env_options ; user defined variables will get passed to the CSS, but not the options. User defined variables will be namespaced under plugin .","title":"CSS Templates"},{"location":"styling/#css-filter","text":"With the template environment, colors and style from the current Sublime color scheme can be accessed and manipulated. Access to the Sublime color scheme styles CSS is done via the css filter. css Retrieves the style for a specific Sublime scope from a Sublime color scheme. By specifying either foreground , background , or any scope (complexity doesn't really matter) and feeding it into the css filter, all the related styling of the specified scope will be inserted as CSS into the CSS document. Example : This: h1 , h2 , h3 , h4 , h5 , h6 { {{ 'comment' | css }} } Might become this: h1 , h2 , h3 , h4 , h5 , h6 { color : #888888 ; font-style : italic ; } Notice that the format of insertion is key: value; . You do not need a semicolon after as the CSS lines are all formatted properly with semicolons. If you add one, you may get multiple semicolons which may break the CSS. If you need to get at a specific CSS attribute, you can specify its name in the css filter (available attributes are color , background-color , font-style , and font-weight ). This: h1 , h2 , h3 , h4 , h5 , h6 { {{ '.comment' | css ( 'color' ) }} } Would then only include the color: h1 , h2 , h3 , h4 , h5 , h6 { color : #888888 ; } In general, a foreground color is always returned, but by default, a background color is only returned if one is explicitly defined. To always get a background (which most likely will default to the overall scheme background), you can set the additional explicit_background parameter to False . /* If `keyword.operator` is not explicitly used, fallback to `.keyword` */ h1 , h2 , h3 , h4 , h5 , h6 { {{ 'keyword.operator' | css ( 'color' , False ) }} }","title":"CSS Filter"},{"location":"styling/#color-filters","text":"MdPopups also provides a number of color filters within the template environment that can manipulate the CSS colors returned from the css filter (or equivalent formatted CSS). These filters will strip out the color and modify it, and return the appropriate CSS. To manipulate a color value directly, you can use Sublime's built in color blending. In most cases, it is advised to use Sublime's color blending functionality, but these are available to aid those who wish to access and manipulate CSS of scopes directly. See Sublime's minihtml documentation for more info. Even though Sublime generally provides contrast to popups, lets pretend you had a popup that was the same color as the view window and it was difficult to see where the popup starts and ends. You can take the color schemes background and apply a brightness filter to it allowing you now see the popup clearly. Here we can make the background of the popup darker: . mdpopups div . myplugin { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } Color filters take a single color attribute of the form key: value; . So when feeding the color template filters your CSS via the css filter, you should specify the color attribute ( background-color or color ) that you wish to apply the filter to; it may be difficult to tell how many attributes css could return without explicitly specifying attribute. Color filters only take either color or background-color attributes. Filters can be chained if more intensity is needed (as some filters may clamp the value in one call), or if you want to apply multiple filters. These are all the available filters: foreground and background If desired, you can convert a foreground color to a background color or vice versa. To convert to a foreground color, you can use the foreground filter. To convert to a background color, you can use the background filter. Remember, this is augmenting the CSS returned by the css filter, you can't just give it a color. To convert a background to a foreground. Example : body { {{ '.background' | css ( 'background-color' )| foreground }} } To convert a foreground to a background. Example : body { {{ '.foreground' | css ( 'color' )| background }} } brightness Shifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change. Accepted values are floats that are greater than 0 . Ranges are clamped between 0 and 2 . Example - Darken : body { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } Example - Lighten : body { {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }} } contrast Increases/decreases the contrast. Contrast is relative to 1 where 1 means no change. Accepted values are floats that are greater than 0 . Ranges are clamped between 0 and 2 . Example - Decrease contrast : body { {{ '.background' | css ( 'background-color' )| contrast ( 0.9 ) }} } Example - Increase contrast : body { {{ '.background' | css ( 'background-color' )| contrast ( 1.1 ) }} } saturation Shifts the saturation either to right (saturate) or the left (desaturate). Saturation is relative to 1 where 1 means no change. Accepted values are floats that are greater than 0 . Ranges are clamped between 0 and 2 . Example - Desaturate : body { {{ '.background' | css ( 'background-color' )| saturation ( 0.9 ) }} } Example - Saturate : body { {{ '.background' | css ( 'background-color' )| saturation ( 1.1 ) }} } grayscale Filters all colors to a grayish tone. Example : body { {{ '.background' | css ( 'background-color' )| grayscale }} } sepia Filters all colors to a sepia tone. Example : body { {{ '.background' | css ( 'background-color' )| sepia }} } invert Inverts a color. Example : body { {{ '.background' | css ( 'background-color' )| invert }} } colorize Filters all colors to a shade of the specified hue. Think grayscale, but instead of gray, you define a non-gray hue. The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0. Example : body { {{ '.background' | css ( 'background-color' )| colorize ( 30 ) }} } hue Shifts the current hue either to the left or right. The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0. Values can either be negative to shift left or positive to shift the hue to the right. Example - Left Shift : body { {{ '.background' | css ( 'background-color' )| hue (- 30 ) }} } Example - Left Right : body { {{ '.background' | css ( 'background-color' )| hue ( 30 ) }} } fade Fades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through. Example - Fade 50% : body { {{ '.foreground' | css ( 'color' )| fade ( 0.5 ) }} }","title":"Color Filters"},{"location":"styling/#include-css-filter","text":"The template environment allows for retrieving CSS resources from Sublime Packages or built-in Pygments CSS from the Pygments library. getcss Retrieve a CSS file from Sublime's Packages folder. CSS retrieved in this manner can include template variables and filters. Example : {{ 'Packages/User/aprosopo-dark.css' | getcss }} pygments Retrieve a built-in Pygments color scheme. Example : {{ 'native' | pygments }}","title":"Include CSS Filter"},{"location":"styling/#template-variables","text":"The template environment provides a couple of variables that can be used to conditionally alter the CSS output. Variables are found under var . var.sublime_version sublime_version contains the current Sublime Text version. This allows you conditionally handle CSS features that are specific to a Sublime Text version. Example {% if var.sublime_version >= 3119 %} padding : 0 . 2rem ; {% else %} padding : 0 . 2em ; {% endif %} var.mdpopups_version mdpopups_version contains the current MdPopups version which you can use in your CSS templates if needed. Example {% if var.mdpopups_version >= ( 1 , 9 , 0 ) %} /* do something */ {% else %} /* do something else */ {% endif %} var.default_style Flag specifying whether default styling is being used. See mdpopups.default_style for how to control this flag. And see default.css for an example of how it is used. var.is_dark and var.is_light is_dark checks if the color scheme is a dark color scheme. Alternatively, is_light checks if the color scheme is a light color scheme. Example : {% if var.is_light %} html { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } {% else %} html { {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }} } {% endif %} var.is_popup , var.is_phantom , and var.is_sheet is_phantom checks if the current CSS is for a phantom instead of a popup. Alternatively, is_popup and is_sheet checks if the current use of the CSS is for a popup or HTML sheet respectively. Example : {% if var.is_phantom %} html { {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }} } {% else %} html { {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }} } {% endif %} var.use_pygments Checks if the Pygments syntax highlighter is being used. Example : {% if var.use_pygments %} {% if var.is_light %} {{ 'default' | pygments }} {% else %} {{ 'native' | pygments }} {% endif %} {% endif %} var.color_scheme Retrieves the current color schemes name. Example : {% if ( var.color_scheme in ( 'Packages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme' , 'Packages/Theme - Aprosopo/Tomorrow-Morning.tmTheme' , ) ) %} a { {{ '.keyword.operator' | css ( 'color' ) }} } {% else %} a { {{ '.support.function' | css ( 'color' ) }} } {% endif %}","title":"Template Variables"},{"location":"about/changelog/","text":"Changelog 4.2.2 FIX : Remove a hack hack related to quote entities. FIX : Fix issue related to transient HTML Sheets. 4.2.1 FIX : Fix relative importing of internal pygments and jinja2 packages. 4.2.0 NEW : MdPopups is now self contained and vendors all dependencies. NEW : Update internal, default CSS to load from inside mdpopups to prepare for Package Control 4.0. 4.1.2 FIX : A few more color related issues. 4.1.1 FIX : Upgrade color library to fix some color related corner cases. Also fix handling of tmTheme colors. 4.1.0 NEW : Plugins can now specify a language map in the front matter via language_map . The format matches the setting with the same name. This allows plugins to specify plugin specific languages that are maybe not good for general use. NEW : Tweak <hr> color. FIX : Fix issues with acquiring scheme selection colors. 4.0.4 FIX : Fix failure when displaying a specific debug message. 4.0.3 FIX : Fix stripping of z in code. 4.0.2 FIX : A few more fixes related to new color handling library. 4.0.1 FIX : Fixes related to new color handling library. 4.0.0 NEW : Added new resolve_images function to allow for processing remote image URLs and downloading the content in an HTML buffer. NEW : nl2br can only be set through markdown_extensions via front matter. If passed as a parameter for any API function, it will be ignored. NEW : allow_code_wrap can only be set through the front matter option allow_code_wrap . If passed as a parameter for any API function (except syntax_highlight ), it will be ignored. NEW : Support latest Markdown and Pymdown Extensions. Must use markdown.extensions.md_in_html instead of pymdownx.extrarawhtml . NEW : Better color handling logic. NEW : Remove mdpopups.legacy_color_matcher option along with legacy color match logic. FIX : Fix exception when using Pygments. FIX : Fix extra newlines in code blocks. FIX : Popups will assign a default background, foreground, and link color. This is to ensure good colors when a color scheme assigns unexpected colors via popup_css . popup_css can override the CSS variables if desired, or a user can always specify a custom CSS via settings to change the variables. New CSS variables --mdpopups-fg , --mdpopups-bg , and --mdpopups-link have been added to to control these colors. 3.7.5 FIX : Don't strip newlines from content that has nl2br disabled. 3.7.4 FIX : Fix plain text syntax highlighting not always being applied correctly as the fallback. FIX : Add JSON/JSON to highlight mapping. 3.7.3 FIX : Fix issue acquiring font styles like bold etc. on latter Sublime builds. 3.7.2 FIX : Add Julia language to highlight list. FIX : Add built-in Typescript language to highlight list. 3.7.1 FIX : Fix logic error when using legacy color matcher. 3.7.0 NEW : Add support for underline and glow in highlighted code blocks. Currently Sublime's API has a bug ( sublimehq/sublime_text#3316 ) that prevents underline from being detected, you can enable the mdpopups.legacy_color_matcher to work around this issue until it is fixed. But keep in mind, leg this is not required as MdPopups will continue working just fine, just without showing underlines in highlighted code. While glow support has been added, it will not actually display proper in minihtml as minihtml cannot yet support the CSS text-shadow feature that is used to create the glow effect. If/when this support is added to Sublime, the glow effect should work. NEW : Add option mdpopups.legacy_color_matcher to enable the legacy color matcher. 3.6.2 FIX : Sublime Text 4 no longer supports cmd and args in HTML sheets. Additionally, version 4074 will be required to get it working. 3.6.1 FIX : Color adjusters with + and - operator must have a space after the operator. FIX : lightness() and saturation() should not accept numbers, only percentages. FIX : Adjustments to match Sublime 4069 which now handles HSL color blending correctly. FIX : Handle HSL/HWB if a user uses the 'deg' unit type. FIX : Sublime doesn't support them, but support 'rad', 'grad', and 'turn' unit types in case Sublime ever supports them in HSL an HWB. 3.6.0 NEW : Add support for parsing alpha(+value) , alpha(-value) , and alpha(*value) in color schemes. NEW : Add support for parsing lightness() and saturation() in color schemes. NEW : Add support for foreground_adjust properties when parsing color schemes. NEW : Add support for parsing blended colors in the HSL and HWB namespace. Blended colors do not always match Sublime Text's colors, this is due to a Sublime Text bug: sublimehq/sublime_text#3176 . 3.5.0 NEW : Upgrade to handle latest pymdownx and markdown module. 3.4.0 NEW : Add support for parsing hwb() and alpha() / a() in color schemes. 3.3.4 FIX : Update code highlight languages. 3.3.3 FIX : Fix tab logic inside st_code_highlight . FIX : Upgrade internal SuperFences to latest. 3.3.2 FIX : Bring extensions up to the latest version. 3.3.1 Jan 1, 2018 FIX : Allow - in variables names. Write color translations to main scheme object and ensure filtering is done after color translations. 3.3.0 Dec 3, 2017 NEW : Add tabs2spaces to process text and convert tabs to spaces according to tab stops. Use case would include formatting text for syntax_highlight . 3.2.0 Nov 21, 2017 NEW : pymdownx and pyyaml are now required for use of mdpopups ( #51 ). NEW : Add support for .hidden-color-scheme ( #50 ). 3.1.3 Nov 8, 2017 FIX : Create fallback file read for resource race condition. 3.1.2 Nov 7, 2017 FIX : Parse legacy foregroundSelection properly. 3.1.1 Nov 4, 2017 FIX : Color matcher library should only return gradients when one is actually found. 3.1.0 Nov 3, 2017 NEW : Handle parsing .sublime-color-scheme files with hashed syntax highlighting foreground colors. FIX : Rework *.sublime-color-scheme merging and ensure User package is merged last. 3.0.5 Oct 30, 2017 FIX : Parse color schemes with unexpected extensions correctly. 3.0.4 Oct 27, 2017 FIX : Support for irregular .sublime-color-scheme values. 3.0.3 Oct 23, 2017 FIX : scope2style wasn't returning background color by default. 3.0.2 Oct 21, 2017 FIX : Improved color scheme parsing logic. FIX : Fix code background not being correct. 3.0.1 Oct 20, 2017 FIX : Update color scheme matcher to latest and fix legacy support issues. 3.0.0 Oct 18, 2017 NEW : Support for .sublime-color-schemes (which are subject to change). NEW : Update rgba library. 2.2.0 Oct 11, 2017 NEW : Remove deprecations. NEW : Update rgba library. NEW : Expose contrast. NEW : Add support for PackageDev settings completions/tooltips/linting. FIX : Hide scratch output panel. FIX : Increase block code font size to 1rem . FIX : Better YAML stripping logic. FIX : More descriptive failure message. 2.1.1 June 21, 2017 FIX : Strip front matter when md=False . Throw it away as we only use the front matter for Markdown. 2.1.0 June 20, 2017 NEW : Allow adding and configuring extensions via YAML front matter. This feature deprecates nl2br function parameter which will be removed some time in the future. NEW : Allow setting whether block, code tags will allow word wrapping via YAML front matter. This feature deprecates the allow_word_wrap function parameter which will be removed some time in the future. NEW : Expose SuperFences' custom_fences feature via YAML front matter. NEW : Upgrade internal extensions. NEW : Import official pymdownx extension if pymdownx is installed as a dependency so we can drop internal vendored extension copies in the future. This is allowed to be optional for a time until people can update their dependencies. NEW : Import pyyaml extension if pyyaml is installed for front matter. This is allowed to be optional for a time until people can update their dependencies. NEW : inline-highlight class in no longer applied to inline code. Instead highlight is applied to both inline and block code. 2.0 June 1, 2017 NEW : Add kbd styling and admontion styling. NEW : New rewritten default.css . Adds styling that uses new Sublime CSS features and drops legacy styling for old ST versions. No more base.css . NEW : No longer outputs scope CSS into default CSS. Users must use template to acquire CSS for specific scopes. This helps keep the CSS namespace clean. In general, CSS should start using Sublime CSS variables like --bluish , --redish etc. If a user needs CSS for a scope, they can use the css template filter to add the scope's CSS to a class of their choice. NEW : MdPopups now requires ST 3124+ and all legacy styling and workarounds for ST < 3124 have been dropped. NEW : Code blocks are now forced to use a monospace fonts. NEW : Legacy relativesize template filter has been dropped. Users should use native CSS rem units for relative sizes. NEW : Upgraded pymdownx extensions which includes fixes and enhancements. Also abandoned using CodeHilite in favor of pymdownx.highlight . NEW : Add option to support wrapping in code blocks. NEW : CSS filters are no longer limited to a set list of TextMate or Sublime scopes, and you no longer specify the parameters as CSS classes (but MdPopups will be forgiving if you do), but you should specify them as scopes (complexity doesn't matter). Also no more specifying multiple scopes separated by commas. Read documentation for more info. NEW : CSS filter now accepts an explicit_background option to return a background only when explicitly defined (which is the default). When disabled, the filter will always return a valid background color (which is usually the base background). NEW : Pygments is no longer the default syntax highlighter. FIX : Fix foreground output that was missing semicolon according to spec. FIX : Numerous CSS fixes. 1.0 Nov 12, 2015 NEW : First release.","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#422","text":"FIX : Remove a hack hack related to quote entities. FIX : Fix issue related to transient HTML Sheets.","title":"4.2.2"},{"location":"about/changelog/#421","text":"FIX : Fix relative importing of internal pygments and jinja2 packages.","title":"4.2.1"},{"location":"about/changelog/#420","text":"NEW : MdPopups is now self contained and vendors all dependencies. NEW : Update internal, default CSS to load from inside mdpopups to prepare for Package Control 4.0.","title":"4.2.0"},{"location":"about/changelog/#412","text":"FIX : A few more color related issues.","title":"4.1.2"},{"location":"about/changelog/#411","text":"FIX : Upgrade color library to fix some color related corner cases. Also fix handling of tmTheme colors.","title":"4.1.1"},{"location":"about/changelog/#410","text":"NEW : Plugins can now specify a language map in the front matter via language_map . The format matches the setting with the same name. This allows plugins to specify plugin specific languages that are maybe not good for general use. NEW : Tweak <hr> color. FIX : Fix issues with acquiring scheme selection colors.","title":"4.1.0"},{"location":"about/changelog/#404","text":"FIX : Fix failure when displaying a specific debug message.","title":"4.0.4"},{"location":"about/changelog/#403","text":"FIX : Fix stripping of z in code.","title":"4.0.3"},{"location":"about/changelog/#402","text":"FIX : A few more fixes related to new color handling library.","title":"4.0.2"},{"location":"about/changelog/#401","text":"FIX : Fixes related to new color handling library.","title":"4.0.1"},{"location":"about/changelog/#400","text":"NEW : Added new resolve_images function to allow for processing remote image URLs and downloading the content in an HTML buffer. NEW : nl2br can only be set through markdown_extensions via front matter. If passed as a parameter for any API function, it will be ignored. NEW : allow_code_wrap can only be set through the front matter option allow_code_wrap . If passed as a parameter for any API function (except syntax_highlight ), it will be ignored. NEW : Support latest Markdown and Pymdown Extensions. Must use markdown.extensions.md_in_html instead of pymdownx.extrarawhtml . NEW : Better color handling logic. NEW : Remove mdpopups.legacy_color_matcher option along with legacy color match logic. FIX : Fix exception when using Pygments. FIX : Fix extra newlines in code blocks. FIX : Popups will assign a default background, foreground, and link color. This is to ensure good colors when a color scheme assigns unexpected colors via popup_css . popup_css can override the CSS variables if desired, or a user can always specify a custom CSS via settings to change the variables. New CSS variables --mdpopups-fg , --mdpopups-bg , and --mdpopups-link have been added to to control these colors.","title":"4.0.0"},{"location":"about/changelog/#375","text":"FIX : Don't strip newlines from content that has nl2br disabled.","title":"3.7.5"},{"location":"about/changelog/#374","text":"FIX : Fix plain text syntax highlighting not always being applied correctly as the fallback. FIX : Add JSON/JSON to highlight mapping.","title":"3.7.4"},{"location":"about/changelog/#373","text":"FIX : Fix issue acquiring font styles like bold etc. on latter Sublime builds.","title":"3.7.3"},{"location":"about/changelog/#372","text":"FIX : Add Julia language to highlight list. FIX : Add built-in Typescript language to highlight list.","title":"3.7.2"},{"location":"about/changelog/#371","text":"FIX : Fix logic error when using legacy color matcher.","title":"3.7.1"},{"location":"about/changelog/#370","text":"NEW : Add support for underline and glow in highlighted code blocks. Currently Sublime's API has a bug ( sublimehq/sublime_text#3316 ) that prevents underline from being detected, you can enable the mdpopups.legacy_color_matcher to work around this issue until it is fixed. But keep in mind, leg this is not required as MdPopups will continue working just fine, just without showing underlines in highlighted code. While glow support has been added, it will not actually display proper in minihtml as minihtml cannot yet support the CSS text-shadow feature that is used to create the glow effect. If/when this support is added to Sublime, the glow effect should work. NEW : Add option mdpopups.legacy_color_matcher to enable the legacy color matcher.","title":"3.7.0"},{"location":"about/changelog/#362","text":"FIX : Sublime Text 4 no longer supports cmd and args in HTML sheets. Additionally, version 4074 will be required to get it working.","title":"3.6.2"},{"location":"about/changelog/#361","text":"FIX : Color adjusters with + and - operator must have a space after the operator. FIX : lightness() and saturation() should not accept numbers, only percentages. FIX : Adjustments to match Sublime 4069 which now handles HSL color blending correctly. FIX : Handle HSL/HWB if a user uses the 'deg' unit type. FIX : Sublime doesn't support them, but support 'rad', 'grad', and 'turn' unit types in case Sublime ever supports them in HSL an HWB.","title":"3.6.1"},{"location":"about/changelog/#360","text":"NEW : Add support for parsing alpha(+value) , alpha(-value) , and alpha(*value) in color schemes. NEW : Add support for parsing lightness() and saturation() in color schemes. NEW : Add support for foreground_adjust properties when parsing color schemes. NEW : Add support for parsing blended colors in the HSL and HWB namespace. Blended colors do not always match Sublime Text's colors, this is due to a Sublime Text bug: sublimehq/sublime_text#3176 .","title":"3.6.0"},{"location":"about/changelog/#350","text":"NEW : Upgrade to handle latest pymdownx and markdown module.","title":"3.5.0"},{"location":"about/changelog/#340","text":"NEW : Add support for parsing hwb() and alpha() / a() in color schemes.","title":"3.4.0"},{"location":"about/changelog/#334","text":"FIX : Update code highlight languages.","title":"3.3.4"},{"location":"about/changelog/#333","text":"FIX : Fix tab logic inside st_code_highlight . FIX : Upgrade internal SuperFences to latest.","title":"3.3.3"},{"location":"about/changelog/#332","text":"FIX : Bring extensions up to the latest version.","title":"3.3.2"},{"location":"about/changelog/#331","text":"Jan 1, 2018 FIX : Allow - in variables names. Write color translations to main scheme object and ensure filtering is done after color translations.","title":"3.3.1"},{"location":"about/changelog/#330","text":"Dec 3, 2017 NEW : Add tabs2spaces to process text and convert tabs to spaces according to tab stops. Use case would include formatting text for syntax_highlight .","title":"3.3.0"},{"location":"about/changelog/#320","text":"Nov 21, 2017 NEW : pymdownx and pyyaml are now required for use of mdpopups ( #51 ). NEW : Add support for .hidden-color-scheme ( #50 ).","title":"3.2.0"},{"location":"about/changelog/#313","text":"Nov 8, 2017 FIX : Create fallback file read for resource race condition.","title":"3.1.3"},{"location":"about/changelog/#312","text":"Nov 7, 2017 FIX : Parse legacy foregroundSelection properly.","title":"3.1.2"},{"location":"about/changelog/#311","text":"Nov 4, 2017 FIX : Color matcher library should only return gradients when one is actually found.","title":"3.1.1"},{"location":"about/changelog/#310","text":"Nov 3, 2017 NEW : Handle parsing .sublime-color-scheme files with hashed syntax highlighting foreground colors. FIX : Rework *.sublime-color-scheme merging and ensure User package is merged last.","title":"3.1.0"},{"location":"about/changelog/#305","text":"Oct 30, 2017 FIX : Parse color schemes with unexpected extensions correctly.","title":"3.0.5"},{"location":"about/changelog/#304","text":"Oct 27, 2017 FIX : Support for irregular .sublime-color-scheme values.","title":"3.0.4"},{"location":"about/changelog/#303","text":"Oct 23, 2017 FIX : scope2style wasn't returning background color by default.","title":"3.0.3"},{"location":"about/changelog/#302","text":"Oct 21, 2017 FIX : Improved color scheme parsing logic. FIX : Fix code background not being correct.","title":"3.0.2"},{"location":"about/changelog/#301","text":"Oct 20, 2017 FIX : Update color scheme matcher to latest and fix legacy support issues.","title":"3.0.1"},{"location":"about/changelog/#300","text":"Oct 18, 2017 NEW : Support for .sublime-color-schemes (which are subject to change). NEW : Update rgba library.","title":"3.0.0"},{"location":"about/changelog/#220","text":"Oct 11, 2017 NEW : Remove deprecations. NEW : Update rgba library. NEW : Expose contrast. NEW : Add support for PackageDev settings completions/tooltips/linting. FIX : Hide scratch output panel. FIX : Increase block code font size to 1rem . FIX : Better YAML stripping logic. FIX : More descriptive failure message.","title":"2.2.0"},{"location":"about/changelog/#211","text":"June 21, 2017 FIX : Strip front matter when md=False . Throw it away as we only use the front matter for Markdown.","title":"2.1.1"},{"location":"about/changelog/#210","text":"June 20, 2017 NEW : Allow adding and configuring extensions via YAML front matter. This feature deprecates nl2br function parameter which will be removed some time in the future. NEW : Allow setting whether block, code tags will allow word wrapping via YAML front matter. This feature deprecates the allow_word_wrap function parameter which will be removed some time in the future. NEW : Expose SuperFences' custom_fences feature via YAML front matter. NEW : Upgrade internal extensions. NEW : Import official pymdownx extension if pymdownx is installed as a dependency so we can drop internal vendored extension copies in the future. This is allowed to be optional for a time until people can update their dependencies. NEW : Import pyyaml extension if pyyaml is installed for front matter. This is allowed to be optional for a time until people can update their dependencies. NEW : inline-highlight class in no longer applied to inline code. Instead highlight is applied to both inline and block code.","title":"2.1.0"},{"location":"about/changelog/#20","text":"June 1, 2017 NEW : Add kbd styling and admontion styling. NEW : New rewritten default.css . Adds styling that uses new Sublime CSS features and drops legacy styling for old ST versions. No more base.css . NEW : No longer outputs scope CSS into default CSS. Users must use template to acquire CSS for specific scopes. This helps keep the CSS namespace clean. In general, CSS should start using Sublime CSS variables like --bluish , --redish etc. If a user needs CSS for a scope, they can use the css template filter to add the scope's CSS to a class of their choice. NEW : MdPopups now requires ST 3124+ and all legacy styling and workarounds for ST < 3124 have been dropped. NEW : Code blocks are now forced to use a monospace fonts. NEW : Legacy relativesize template filter has been dropped. Users should use native CSS rem units for relative sizes. NEW : Upgraded pymdownx extensions which includes fixes and enhancements. Also abandoned using CodeHilite in favor of pymdownx.highlight . NEW : Add option to support wrapping in code blocks. NEW : CSS filters are no longer limited to a set list of TextMate or Sublime scopes, and you no longer specify the parameters as CSS classes (but MdPopups will be forgiving if you do), but you should specify them as scopes (complexity doesn't matter). Also no more specifying multiple scopes separated by commas. Read documentation for more info. NEW : CSS filter now accepts an explicit_background option to return a background only when explicitly defined (which is the default). When disabled, the filter will always return a valid background color (which is usually the base background). NEW : Pygments is no longer the default syntax highlighter. FIX : Fix foreground output that was missing semicolon according to spec. FIX : Numerous CSS fixes.","title":"2.0"},{"location":"about/changelog/#10","text":"Nov 12, 2015 NEW : First release.","title":"1.0"},{"location":"about/contributing/","text":"Contributing & Support Overview Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Sublime Text build. Operating system. Errors in console. Color scheme currently being used. Language syntax highlighter being used if issue deals with a code highlighting. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing commits and merges. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Sublime Text build. Operating system. Errors in console. Color scheme currently being used. Language syntax highlighter being used if issue deals with a code highlighting. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing commits and merges. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"about/contributing/#running-validation-tests","text":"Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"about/license/","text":"License The MIT License (MIT) Copyright \u00a9 2015 - 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"The MIT License (MIT) Copyright \u00a9 2015 - 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}