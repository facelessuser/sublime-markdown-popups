"""Test image resolver."""
import unittest
from mdpopups import _ImagesToResolveParser, _ImageResolver, resolve_urls
import base64


JPEG_IMAGE_BASE64_ENCODED = ''


def mock_resolver(url, done):
    # for testing purposes, pretend this is the image we resolve
    done(base64.b64decode(JPEG_IMAGE_BASE64_ENCODED))


class TestImageResolver(unittest.TestCase):
    """Test image resolver."""

    def test_one_image_tag(self):
        parser = _ImagesToResolveParser()
        parser.feed('<p><img src="http://example.org/image.jpeg"/></p>')
        self.assertEqual(len(parser.images_to_resolve), 1)
        for k, v in parser.images_to_resolve.items():
            self.assertEqual(k, "http://example.org/image.jpeg")
            # rows are 1-based
            # cols are 0-based for some reason
            # the position is the opening `<` of the `<img>` tag
            self.assertEqual(v, [(1, 3)])

    def test_two_image_tags(self):
        parser = _ImagesToResolveParser()
        parser.feed('<p><img src="http://example.org/image.jpeg"/><strong>hello there</strong><img src="http://example.org/image.png"/></p>')
        self.assertEqual(len(parser.images_to_resolve), 2)
        self.assertEqual(parser.images_to_resolve["http://example.org/image.jpeg"], [(1, 3)])
        self.assertEqual(parser.images_to_resolve["http://example.org/image.png"], [(1, 73)])

    def test_three_images_one_which_is_a_repeat(self):
        parser = _ImagesToResolveParser()
        parser.feed('<p><img src="http://example.org/image.jpeg"/><strong>hello there</strong><img src="http://example.org/image.png"/><img src="http://example.org/image.jpeg"/></p>')
        self.assertEqual(len(parser.images_to_resolve), 2)
        # http://example.org/image.jpeg has two locations
        self.assertEqual(parser.images_to_resolve["http://example.org/image.jpeg"], [(1, 3), (1, 114)])
        # http://example.org/image.png has one location
        self.assertEqual(parser.images_to_resolve["http://example.org/image.png"], [(1, 73)])

    def test_image_resolver_class(self):
        minihtml = '<p><img src="http://example.org/image.jpeg"/></p>'

        def done_callback(transformed_minihtml):
            self.assertEqual(transformed_minihtml, '<p><img src="data:image/jpeg, {}"/></p>'.format(JPEG_IMAGE_BASE64_ENCODED))

        resolver = _ImageResolver(minihtml, mock_resolver, done_callback, {"http://example.org/image.jpeg": [(1, 3)]})

    def test_resolve_urls(self):
        minihtml = '<p><img src="http://example.org/image.jpeg"/></p>'

        def done_callback(transformed_minihtml):
            self.assertEqual(transformed_minihtml, '<p><img src="data:image/jpeg, {}"/></p>'.format(JPEG_IMAGE_BASE64_ENCODED))

        resolve_urls(minihtml, mock_resolver, done_callback)
